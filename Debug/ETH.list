
ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076bc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007954  08007954  00008954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800798c  0800798c  0000898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007994  08007994  00008994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007998  08007998  00008998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  24000000  0800799c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  24000074  08007a10  00009074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  240000d4  08007a70  000090d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  24000134  08007ad0  00009134  2**2
                  ALLOC
 10 ._user_heap_stack 00015000  240005a8  08007ad0  000095a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b315  00000000  00000000  00009162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b43  00000000  00000000  00024477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00026fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dec  00000000  00000000  000281a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038db7  00000000  00000000  00028f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001839f  00000000  00000000  00061d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00166610  00000000  00000000  0007a0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e06f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  001e0738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  001e56ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000134 	.word	0x24000134
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800793c 	.word	0x0800793c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000138 	.word	0x24000138
 80002d4:	0800793c 	.word	0x0800793c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <LAN8742_RegisterBusIO+0x28>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d007      	beq.n	80005f0 <LAN8742_RegisterBusIO+0x28>
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <LAN8742_RegisterBusIO+0x28>
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	e014      	b.n	8000620 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	68da      	ldr	r2, [r3, #12]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	691a      	ldr	r2, [r3, #16]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d139      	bne.n	80006bc <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2220      	movs	r2, #32
 800065a:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e01c      	b.n	800069c <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f107 020c 	add.w	r2, r7, #12
 800066a:	2112      	movs	r1, #18
 800066c:	6978      	ldr	r0, [r7, #20]
 800066e:	4798      	blx	r3
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	da03      	bge.n	800067e <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000676:	f06f 0304 	mvn.w	r3, #4
 800067a:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800067c:	e00b      	b.n	8000696 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f003 031f 	and.w	r3, r3, #31
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	429a      	cmp	r2, r3
 8000688:	d105      	bne.n	8000696 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
         break;
 8000694:	e005      	b.n	80006a2 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2b1f      	cmp	r3, #31
 80006a0:	d9df      	bls.n	8000662 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b1f      	cmp	r3, #31
 80006a8:	d902      	bls.n	80006b0 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80006aa:	f06f 0302 	mvn.w	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d102      	bne.n	80006bc <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2201      	movs	r2, #1
 80006ba:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80006bc:	693b      	ldr	r3, [r7, #16]
 }
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	6810      	ldr	r0, [r2, #0]
 80006da:	f107 020c 	add.w	r2, r7, #12
 80006de:	2101      	movs	r1, #1
 80006e0:	4798      	blx	r3
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da02      	bge.n	80006ee <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80006e8:	f06f 0304 	mvn.w	r3, #4
 80006ec:	e06e      	b.n	80007cc <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	6810      	ldr	r0, [r2, #0]
 80006f6:	f107 020c 	add.w	r2, r7, #12
 80006fa:	2101      	movs	r1, #1
 80006fc:	4798      	blx	r3
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	da02      	bge.n	800070a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000704:	f06f 0304 	mvn.w	r3, #4
 8000708:	e060      	b.n	80007cc <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000714:	2301      	movs	r3, #1
 8000716:	e059      	b.n	80007cc <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	6810      	ldr	r0, [r2, #0]
 8000720:	f107 020c 	add.w	r2, r7, #12
 8000724:	2100      	movs	r1, #0
 8000726:	4798      	blx	r3
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	da02      	bge.n	8000734 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800072e:	f06f 0304 	mvn.w	r3, #4
 8000732:	e04b      	b.n	80007cc <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d11b      	bne.n	8000776 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d006      	beq.n	8000756 <LAN8742_GetLinkState+0x90>
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000752:	2302      	movs	r3, #2
 8000754:	e03a      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000760:	2303      	movs	r3, #3
 8000762:	e033      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800076e:	2304      	movs	r3, #4
 8000770:	e02c      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000772:	2305      	movs	r3, #5
 8000774:	e02a      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	6810      	ldr	r0, [r2, #0]
 800077e:	f107 020c 	add.w	r2, r7, #12
 8000782:	211f      	movs	r1, #31
 8000784:	4798      	blx	r3
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	da02      	bge.n	8000792 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800078c:	f06f 0304 	mvn.w	r3, #4
 8000790:	e01c      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800079c:	2306      	movs	r3, #6
 800079e:	e015      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 031c 	and.w	r3, r3, #28
 80007a6:	2b18      	cmp	r3, #24
 80007a8:	d101      	bne.n	80007ae <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80007aa:	2302      	movs	r3, #2
 80007ac:	e00e      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f003 031c 	and.w	r3, r3, #28
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d101      	bne.n	80007bc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80007b8:	2303      	movs	r3, #3
 80007ba:	e007      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f003 031c 	and.w	r3, r3, #28
 80007c2:	2b14      	cmp	r3, #20
 80007c4:	d101      	bne.n	80007ca <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80007c6:	2304      	movs	r3, #4
 80007c8:	e000      	b.n	80007cc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80007ca:	2305      	movs	r3, #5
    }
  }
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	__NOP();
 80007da:	bf00      	nop
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007dc:	f000 fc15 	bl	800100a <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 ffe0 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f822 	bl	800082c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007e8:	f000 f89c 	bl	8000924 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 fa5e 	bl	8000cac <MX_GPIO_Init>
  MX_ETH_Init();
 80007f0:	f000 f8c8 	bl	8000984 <MX_ETH_Init>
  MX_I2C1_Init();
 80007f4:	f000 f922 	bl	8000a3c <MX_I2C1_Init>
  MX_SPI1_Init();
 80007f8:	f000 f960 	bl	8000abc <MX_SPI1_Init>
  MX_SPI2_Init();
 80007fc:	f000 f9b4 	bl	8000b68 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000800:	f000 fa08 	bl	8000c14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  ETH_BufferTypeDef *p = NULL;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    p = NULL;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
    HAL_ETH_ReadData(&heth, (void **)&p);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <main+0x54>)
 8000812:	f001 fbc3 	bl	8001f9c <HAL_ETH_ReadData>
    if (p != NULL)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d000      	beq.n	800081e <main+0x4a>
    {
      __NOP();
 800081c:	bf00      	nop
    }
    free(p);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f006 ff47 	bl	80076b4 <free>
    p = NULL;
 8000826:	e7ef      	b.n	8000808 <main+0x34>
 8000828:	24000188 	.word	0x24000188

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b09c      	sub	sp, #112	@ 0x70
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	224c      	movs	r2, #76	@ 0x4c
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f006 fff0 	bl	8007820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2220      	movs	r2, #32
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 ffea 	bl	8007820 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800084c:	2002      	movs	r0, #2
 800084e:	f002 fec1 	bl	80035d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b31      	ldr	r3, [pc, #196]	@ (800091c <SystemClock_Config+0xf0>)
 8000858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085a:	4a30      	ldr	r2, [pc, #192]	@ (800091c <SystemClock_Config+0xf0>)
 800085c:	f023 0301 	bic.w	r3, r3, #1
 8000860:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000862:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <SystemClock_Config+0xf0>)
 8000864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <SystemClock_Config+0xf4>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000874:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <SystemClock_Config+0xf4>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <SystemClock_Config+0xf4>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000888:	bf00      	nop
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <SystemClock_Config+0xf4>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000896:	d1f8      	bne.n	800088a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2301      	movs	r3, #1
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008ae:	2364      	movs	r3, #100	@ 0x64
 80008b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008be:	2308      	movs	r3, #8
 80008c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 feba 	bl	8003648 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008da:	f000 fbc2 	bl	8001062 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	233f      	movs	r3, #63	@ 0x3f
 80008e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ea:	2308      	movs	r3, #8
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ee:	2340      	movs	r3, #64	@ 0x40
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008f2:	2340      	movs	r3, #64	@ 0x40
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008fc:	2340      	movs	r3, #64	@ 0x40
 80008fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2102      	movs	r1, #2
 8000904:	4618      	mov	r0, r3
 8000906:	f003 faf9 	bl	8003efc <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000910:	f000 fba7 	bl	8001062 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3770      	adds	r7, #112	@ 0x70
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	58000400 	.word	0x58000400
 8000920:	58024800 	.word	0x58024800

08000924 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0b0      	sub	sp, #192	@ 0xc0
 8000928:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	22c0      	movs	r2, #192	@ 0xc0
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f006 ff75 	bl	8007820 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8000936:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000942:	2305      	movs	r3, #5
 8000944:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000946:	2364      	movs	r3, #100	@ 0x64
 8000948:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800095a:	2320      	movs	r3, #32
 800095c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000966:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fe52 	bl	8004614 <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000976:	f000 fb74 	bl	8001062 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	37c0      	adds	r7, #192	@ 0xc0
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000988:	4b24      	ldr	r3, [pc, #144]	@ (8000a1c <MX_ETH_Init+0x98>)
 800098a:	4a25      	ldr	r2, [pc, #148]	@ (8000a20 <MX_ETH_Init+0x9c>)
 800098c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <MX_ETH_Init+0xa0>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x0C;
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <MX_ETH_Init+0xa0>)
 8000996:	220c      	movs	r2, #12
 8000998:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xCD;
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <MX_ETH_Init+0xa0>)
 800099c:	22cd      	movs	r2, #205	@ 0xcd
 800099e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x04;
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <MX_ETH_Init+0xa0>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x03;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <MX_ETH_Init+0xa0>)
 80009a8:	2203      	movs	r2, #3
 80009aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0xFF;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_ETH_Init+0xa0>)
 80009ae:	22ff      	movs	r2, #255	@ 0xff
 80009b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_ETH_Init+0x98>)
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <MX_ETH_Init+0xa0>)
 80009b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009b8:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_ETH_Init+0x98>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_ETH_Init+0x98>)
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <MX_ETH_Init+0xa4>)
 80009c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_ETH_Init+0x98>)
 80009c6:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <MX_ETH_Init+0xa8>)
 80009c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_ETH_Init+0x98>)
 80009cc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80009d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  MACAddr[0] = 0x01;
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_ETH_Init+0xa0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009d8:	4810      	ldr	r0, [pc, #64]	@ (8000a1c <MX_ETH_Init+0x98>)
 80009da:	f001 f91d 	bl	8001c18 <HAL_ETH_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ETH_Init+0x64>
  {
    Error_Handler();
 80009e4:	f000 fb3d 	bl	8001062 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009e8:	2238      	movs	r2, #56	@ 0x38
 80009ea:	2100      	movs	r1, #0
 80009ec:	4810      	ldr	r0, [pc, #64]	@ (8000a30 <MX_ETH_Init+0xac>)
 80009ee:	f006 ff17 	bl	8007820 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_ETH_Init+0xac>)
 80009f4:	2221      	movs	r2, #33	@ 0x21
 80009f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <MX_ETH_Init+0xac>)
 80009fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_ETH_Init+0xac>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

	  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000a06:	490b      	ldr	r1, [pc, #44]	@ (8000a34 <MX_ETH_Init+0xb0>)
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <MX_ETH_Init+0xb4>)
 8000a0a:	f7ff fddd 	bl	80005c8 <LAN8742_RegisterBusIO>

	  /* Initialize the LAN8742 ETH PHY */
	  LAN8742_Init(&LAN8742);
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <MX_ETH_Init+0xb4>)
 8000a10:	f7ff fe0c 	bl	800062c <LAN8742_Init>

	  /* Initialize link speed negotiation and start Ethernet peripheral */
	  ETH_StartLink();
 8000a14:	f000 fa20 	bl	8000e58 <ETH_StartLink>

  /* USER CODE END ETH_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000188 	.word	0x24000188
 8000a20:	40028000 	.word	0x40028000
 8000a24:	24000450 	.word	0x24000450
 8000a28:	240000d4 	.word	0x240000d4
 8000a2c:	24000074 	.word	0x24000074
 8000a30:	24000150 	.word	0x24000150
 8000a34:	24000000 	.word	0x24000000
 8000a38:	24000430 	.word	0x24000430

08000a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a78:	f002 fc78 	bl	800336c <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f000 faee 	bl	8001062 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8a:	f002 fd0b 	bl	80034a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 fae5 	bl	8001062 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9c:	f002 fd4d 	bl	800353a <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 fadc 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24000238 	.word	0x24000238
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	00c0eaff 	.word	0x00c0eaff

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000ac2:	4a28      	ldr	r2, [pc, #160]	@ (8000b64 <MX_SPI1_Init+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000ac8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000ae8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000af0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000af4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_SPI1_Init+0xa4>)
 8000b4e:	f005 fb8d 	bl	800626c <HAL_SPI_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b58:	f000 fa83 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2400028c 	.word	0x2400028c
 8000b64:	40013000 	.word	0x40013000

08000b68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b6e:	4a28      	ldr	r2, [pc, #160]	@ (8000c10 <MX_SPI2_Init+0xa8>)
 8000b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b80:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b84:	2203      	movs	r2, #3
 8000b86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b96:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_SPI2_Init+0xa4>)
 8000bfa:	f005 fb37 	bl	800626c <HAL_SPI_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000c04:	f000 fa2d 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	24000314 	.word	0x24000314
 8000c10:	40003800 	.word	0x40003800

08000c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <MX_USART1_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c5e:	f005 fc44 	bl	80064ea <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f9fb 	bl	8001062 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c70:	f006 fc4d 	bl	800750e <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f9f2 	bl	8001062 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c82:	f006 fc82 	bl	800758a <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f9e9 	bl	8001062 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c92:	f006 fc03 	bl	800749c <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f9e1 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2400039c 	.word	0x2400039c
 8000ca8:	40011000 	.word	0x40011000

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b37      	ldr	r3, [pc, #220]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce0:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	4a2a      	ldr	r2, [pc, #168]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0e:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2c:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a1b      	ldr	r2, [pc, #108]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5e:	4815      	ldr	r0, [pc, #84]	@ (8000db4 <MX_GPIO_Init+0x108>)
 8000d60:	f002 faea 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <MX_GPIO_Init+0x10c>)
 8000d6a:	f002 fae5 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <MX_GPIO_Init+0x108>)
 8000d88:	f002 f926 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_GPIO_Init+0x10c>)
 8000da4:	f002 f918 	bl	8002fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	@ 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020000 	.word	0x58020000
 8000db8:	58021000 	.word	0x58021000

08000dbc <ETH_PHY_INTERFACE_Init>:

/* USER CODE BEGIN 4 */
/*===============================PHY Functions===============================*/
int32_t ETH_PHY_INTERFACE_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <ETH_PHY_INTERFACE_Init+0x10>)
 8000dc2:	f001 fdd3 	bl	800296c <HAL_ETH_SetMDIOClockRange>
  return 0;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	24000188 	.word	0x24000188

08000dd0 <ETH_PHY_INTERFACE_DeInit>:

int32_t ETH_PHY_INTERFACE_DeInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <ETH_PHY_INTERFACE_ReadReg>:

int32_t ETH_PHY_INTERFACE_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <ETH_PHY_INTERFACE_ReadReg+0x30>)
 8000df4:	f001 fb24 	bl	8002440 <HAL_ETH_ReadPHYRegister>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <ETH_PHY_INTERFACE_ReadReg+0x24>
  {
    return -1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e000      	b.n	8000e06 <ETH_PHY_INTERFACE_ReadReg+0x26>
  }

  return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	24000188 	.word	0x24000188

08000e14 <ETH_PHY_INTERFACE_WriteReg>:
int32_t ETH_PHY_INTERFACE_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <ETH_PHY_INTERFACE_WriteReg+0x30>)
 8000e28:	f001 fb5e 	bl	80024e8 <HAL_ETH_WritePHYRegister>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <ETH_PHY_INTERFACE_WriteReg+0x24>
  {
    return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e000      	b.n	8000e3a <ETH_PHY_INTERFACE_WriteReg+0x26>
  }

  return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24000188 	.word	0x24000188

08000e48 <ETH_PHY_INTERFACE_GetTick>:

int32_t ETH_PHY_INTERFACE_GetTick(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000e4c:	f000 fd30 	bl	80018b0 <HAL_GetTick>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <ETH_StartLink>:

/*===============================ETH Functions===============================*/

void ETH_StartLink()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b09e      	sub	sp, #120	@ 0x78
 8000e5c:	af00      	add	r7, sp, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2264      	movs	r2, #100	@ 0x64
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fcdb 	bl	8007820 <memset>
  int32_t PHYLinkState = 0U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e72:	2300      	movs	r3, #0
 8000e74:	673b      	str	r3, [r7, #112]	@ 0x70
 8000e76:	2300      	movs	r3, #0
 8000e78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000e7a:	4831      	ldr	r0, [pc, #196]	@ (8000f40 <ETH_StartLink+0xe8>)
 8000e7c:	f7ff fc23 	bl	80006c6 <LAN8742_GetLinkState>
 8000e80:	66b8      	str	r0, [r7, #104]	@ 0x68

  if (PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000e82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	dc03      	bgt.n	8000e90 <ETH_StartLink+0x38>
  {
    HAL_ETH_Stop(&heth);
 8000e88:	482e      	ldr	r0, [pc, #184]	@ (8000f44 <ETH_StartLink+0xec>)
 8000e8a:	f001 f837 	bl	8001efc <HAL_ETH_Stop>
      MACConf.LoopbackMode = DISABLE;
      HAL_ETH_SetMACConfig(&heth, &MACConf);
      HAL_ETH_Start_IT(&heth);
    }
  }
}
 8000e8e:	e052      	b.n	8000f36 <ETH_StartLink+0xde>
  else if (PHYLinkState > LAN8742_STATUS_LINK_DOWN)
 8000e90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	dd4f      	ble.n	8000f36 <ETH_StartLink+0xde>
    switch (PHYLinkState)
 8000e96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d82a      	bhi.n	8000ef4 <ETH_StartLink+0x9c>
 8000e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <ETH_StartLink+0x4c>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08000ec7 	.word	0x08000ec7
 8000eac:	08000ed7 	.word	0x08000ed7
 8000eb0:	08000ee7 	.word	0x08000ee7
      duplex = ETH_FULLDUPLEX_MODE;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
      speed = ETH_SPEED_100M;
 8000eba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ebe:	673b      	str	r3, [r7, #112]	@ 0x70
      linkchanged = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	677b      	str	r3, [r7, #116]	@ 0x74
      break;
 8000ec4:	e017      	b.n	8000ef6 <ETH_StartLink+0x9e>
      duplex = ETH_HALFDUPLEX_MODE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
      speed = ETH_SPEED_100M;
 8000eca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ece:	673b      	str	r3, [r7, #112]	@ 0x70
      linkchanged = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	677b      	str	r3, [r7, #116]	@ 0x74
      break;
 8000ed4:	e00f      	b.n	8000ef6 <ETH_StartLink+0x9e>
      duplex = ETH_FULLDUPLEX_MODE;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
      speed = ETH_SPEED_10M;
 8000edc:	2300      	movs	r3, #0
 8000ede:	673b      	str	r3, [r7, #112]	@ 0x70
      linkchanged = 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	677b      	str	r3, [r7, #116]	@ 0x74
      break;
 8000ee4:	e007      	b.n	8000ef6 <ETH_StartLink+0x9e>
      duplex = ETH_HALFDUPLEX_MODE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
      speed = ETH_SPEED_10M;
 8000eea:	2300      	movs	r3, #0
 8000eec:	673b      	str	r3, [r7, #112]	@ 0x70
      linkchanged = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	677b      	str	r3, [r7, #116]	@ 0x74
      break;
 8000ef2:	e000      	b.n	8000ef6 <ETH_StartLink+0x9e>
      break;
 8000ef4:	bf00      	nop
    if (linkchanged)
 8000ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d01c      	beq.n	8000f36 <ETH_StartLink+0xde>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <ETH_StartLink+0xec>)
 8000f02:	f001 fb45 	bl	8002590 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8000f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f08:	61fb      	str	r3, [r7, #28]
      MACConf.Speed = speed;
 8000f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f0c:	61bb      	str	r3, [r7, #24]
      MACConf.DropTCPIPChecksumErrorPacket = DISABLE; // changed
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
      MACConf.ForwardRxErrorPacket = ENABLE;          // FEP Bit
 8000f14:	2301      	movs	r3, #1
 8000f16:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
      MACConf.ForwardRxUndersizedGoodPacket = ENABLE; // FUP Bit
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
      MACConf.LoopbackMode = DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3020 	strb.w	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <ETH_StartLink+0xec>)
 8000f2c:	f001 fd04 	bl	8002938 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <ETH_StartLink+0xec>)
 8000f32:	f000 ff6f 	bl	8001e14 <HAL_ETH_Start_IT>
}
 8000f36:	bf00      	nop
 8000f38:	3778      	adds	r7, #120	@ 0x78
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24000430 	.word	0x24000430
 8000f44:	24000188 	.word	0x24000188

08000f48 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  ETH_BufferTypeDef *p = malloc(900);
 8000f50:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000f54:	f006 fba6 	bl	80076a4 <malloc>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
  if (p)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <HAL_ETH_RxAllocateCallback+0x34>
  {
    *buff = (uint8_t *)p + offsetof(ETH_AppBuff, buffer);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f103 0220 	add.w	r2, r3, #32
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	601a      	str	r2, [r3, #0]

    p->next = NULL;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    p->len = 900;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000f78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    *buff = NULL;
  }
}
 8000f7a:	e002      	b.n	8000f82 <HAL_ETH_RxAllocateCallback+0x3a>
    *buff = NULL;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b089      	sub	sp, #36	@ 0x24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	807b      	strh	r3, [r7, #2]
  ETH_BufferTypeDef **ppStart = (ETH_BufferTypeDef **)pStart;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef **ppEnd = (ETH_BufferTypeDef **)pEnd;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *p = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  p = (ETH_BufferTypeDef *)(buff - offsetof(ETH_AppBuff, buffer));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b20      	subs	r3, #32
 8000fa8:	617b      	str	r3, [r7, #20]
  p->next = NULL;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  p->len = 900;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000fb6:	605a      	str	r2, [r3, #4]

  /* Chain the buffer. */
  if (!*ppStart)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <HAL_ETH_RxLinkCallback+0x3e>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e003      	b.n	8000fd0 <HAL_ETH_RxLinkCallback+0x46>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	609a      	str	r2, [r3, #8]
  }
  *ppEnd = p;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_ETH_RxCpltCallback>:
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800101c:	f000 fd84 	bl	8001b28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001020:	2301      	movs	r3, #1
 8001022:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001024:	2300      	movs	r3, #0
 8001026:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800102c:	231f      	movs	r3, #31
 800102e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001030:	2387      	movs	r3, #135	@ 0x87
 8001032:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001034:	2300      	movs	r3, #0
 8001036:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001038:	2300      	movs	r3, #0
 800103a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800103c:	2301      	movs	r3, #1
 800103e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001040:	2301      	movs	r3, #1
 8001042:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800104c:	463b      	mov	r3, r7
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fda2 	bl	8001b98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001054:	2004      	movs	r0, #4
 8001056:	f000 fd7f 	bl	8001b58 <HAL_MPU_Enable>

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001066:	b672      	cpsid	i
}
 8001068:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106a:	bf00      	nop
 800106c:	e7fd      	b.n	800106a <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_MspInit+0x30>)
 8001078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800107c:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_MspInit+0x30>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_MspInit+0x30>)
 8001088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	58024400 	.word	0x58024400

080010a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	@ 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a4d      	ldr	r2, [pc, #308]	@ (80011f8 <HAL_ETH_MspInit+0x154>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f040 8093 	bne.w	80011ee <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80010c8:	4b4c      	ldr	r3, [pc, #304]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 80010ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ce:	4a4b      	ldr	r2, [pc, #300]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 80010d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010d8:	4b48      	ldr	r3, [pc, #288]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 80010da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010e6:	4b45      	ldr	r3, [pc, #276]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 80010e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ec:	4a43      	ldr	r2, [pc, #268]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010f6:	4b41      	ldr	r3, [pc, #260]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 80010f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001104:	4b3d      	ldr	r3, [pc, #244]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800110a:	4a3c      	ldr	r2, [pc, #240]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 800110c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001110:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001114:	4b39      	ldr	r3, [pc, #228]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b36      	ldr	r3, [pc, #216]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001128:	4a34      	ldr	r2, [pc, #208]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001132:	4b32      	ldr	r3, [pc, #200]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001146:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001150:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001164:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116e:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <HAL_ETH_MspInit+0x158>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800117c:	2332      	movs	r3, #50	@ 0x32
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	230b      	movs	r3, #11
 800118e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	481a      	ldr	r0, [pc, #104]	@ (8001200 <HAL_ETH_MspInit+0x15c>)
 8001198:	f001 ff1e 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800119c:	2386      	movs	r3, #134	@ 0x86
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ac:	230b      	movs	r3, #11
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4813      	ldr	r0, [pc, #76]	@ (8001204 <HAL_ETH_MspInit+0x160>)
 80011b8:	f001 ff0e 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80011bc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ce:	230b      	movs	r3, #11
 80011d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <HAL_ETH_MspInit+0x164>)
 80011da:	f001 fefd 	bl	8002fd8 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2105      	movs	r1, #5
 80011e2:	203d      	movs	r0, #61	@ 0x3d
 80011e4:	f000 fc6b 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80011e8:	203d      	movs	r0, #61	@ 0x3d
 80011ea:	f000 fc82 	bl	8001af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3738      	adds	r7, #56	@ 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40028000 	.word	0x40028000
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020800 	.word	0x58020800
 8001204:	58020000 	.word	0x58020000
 8001208:	58020400 	.word	0x58020400

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ba      	sub	sp, #232	@ 0xe8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	22c0      	movs	r2, #192	@ 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 faf7 	bl	8007820 <memset>
  if(hi2c->Instance==I2C1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <HAL_I2C_MspInit+0xc4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d145      	bne.n	80012c8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800123c:	f04f 0208 	mov.w	r2, #8
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f9de 	bl	8004614 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800125e:	f7ff ff00 	bl	8001062 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a1a      	ldr	r2, [pc, #104]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001280:	23c0      	movs	r3, #192	@ 0xc0
 8001282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001286:	2312      	movs	r3, #18
 8001288:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001298:	2304      	movs	r3, #4
 800129a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a2:	4619      	mov	r1, r3
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012a6:	f001 fe97 	bl	8002fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b0:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 80012b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 80012bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	37e8      	adds	r7, #232	@ 0xe8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40005400 	.word	0x40005400
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020400 	.word	0x58020400

080012dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a34      	ldr	r2, [pc, #208]	@ (80013cc <HAL_SPI_MspInit+0xf0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12e      	bne.n	800135c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fe:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001304:	4a32      	ldr	r2, [pc, #200]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001306:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800130e:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001322:	4a2b      	ldr	r2, [pc, #172]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132c:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800133a:	2338      	movs	r3, #56	@ 0x38
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800134a:	2305      	movs	r3, #5
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <HAL_SPI_MspInit+0xf8>)
 8001356:	f001 fe3f 	bl	8002fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800135a:	e033      	b.n	80013c4 <HAL_SPI_MspInit+0xe8>
  else if(hspi->Instance==SPI2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <HAL_SPI_MspInit+0xfc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12e      	bne.n	80013c4 <HAL_SPI_MspInit+0xe8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800136c:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001372:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800137c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138a:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_SPI_MspInit+0xf4>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80013a2:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b4:	2305      	movs	r3, #5
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <HAL_SPI_MspInit+0xf8>)
 80013c0:	f001 fe0a 	bl	8002fd8 <HAL_GPIO_Init>
}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	@ 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40013000 	.word	0x40013000
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020400 	.word	0x58020400
 80013d8:	40003800 	.word	0x40003800

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0bc      	sub	sp, #240	@ 0xf0
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	22c0      	movs	r2, #192	@ 0xc0
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f006 fa0f 	bl	8007820 <memset>
  if(huart->Instance==USART1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a39      	ldr	r2, [pc, #228]	@ (80014ec <HAL_UART_MspInit+0x110>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d16b      	bne.n	80014e4 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800140c:	f04f 0201 	mov.w	r2, #1
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4618      	mov	r0, r3
 8001424:	f003 f8f6 	bl	8004614 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800142e:	f7ff fe18 	bl	8001062 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001432:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001438:	4a2d      	ldr	r2, [pc, #180]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001474:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_UART_MspInit+0x114>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800148c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001490:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014a6:	2304      	movs	r3, #4
 80014a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014b0:	4619      	mov	r1, r3
 80014b2:	4810      	ldr	r0, [pc, #64]	@ (80014f4 <HAL_UART_MspInit+0x118>)
 80014b4:	f001 fd90 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d2:	2307      	movs	r3, #7
 80014d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <HAL_UART_MspInit+0x11c>)
 80014e0:	f001 fd7a 	bl	8002fd8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80014e4:	bf00      	nop
 80014e6:	37f0      	adds	r7, #240	@ 0xf0
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40011000 	.word	0x40011000
 80014f0:	58024400 	.word	0x58024400
 80014f4:	58020400 	.word	0x58020400
 80014f8:	58020000 	.word	0x58020000

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <NMI_Handler+0x4>

08001504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <MemManage_Handler+0x4>

08001514 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <UsageFault_Handler+0x4>

08001524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f000 f999 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <ETH_IRQHandler+0x10>)
 8001562:	f000 fe51 	bl	8002208 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	24000188 	.word	0x24000188

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f006 f956 	bl	8007850 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	24080000 	.word	0x24080000
 80015d0:	00010000 	.word	0x00010000
 80015d4:	24000458 	.word	0x24000458
 80015d8:	240005a8 	.word	0x240005a8

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <SystemInit+0x114>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a42      	ldr	r2, [pc, #264]	@ (80016f0 <SystemInit+0x114>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015f0:	4b40      	ldr	r3, [pc, #256]	@ (80016f4 <SystemInit+0x118>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d807      	bhi.n	800160c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015fc:	4b3d      	ldr	r3, [pc, #244]	@ (80016f4 <SystemInit+0x118>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 030f 	bic.w	r3, r3, #15
 8001604:	4a3b      	ldr	r2, [pc, #236]	@ (80016f4 <SystemInit+0x118>)
 8001606:	f043 0307 	orr.w	r3, r3, #7
 800160a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800160c:	4b3a      	ldr	r3, [pc, #232]	@ (80016f8 <SystemInit+0x11c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a39      	ldr	r2, [pc, #228]	@ (80016f8 <SystemInit+0x11c>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001618:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <SystemInit+0x11c>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800161e:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <SystemInit+0x11c>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4935      	ldr	r1, [pc, #212]	@ (80016f8 <SystemInit+0x11c>)
 8001624:	4b35      	ldr	r3, [pc, #212]	@ (80016fc <SystemInit+0x120>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800162a:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <SystemInit+0x118>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001636:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <SystemInit+0x118>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 030f 	bic.w	r3, r3, #15
 800163e:	4a2d      	ldr	r2, [pc, #180]	@ (80016f4 <SystemInit+0x118>)
 8001640:	f043 0307 	orr.w	r3, r3, #7
 8001644:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001646:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <SystemInit+0x11c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <SystemInit+0x11c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <SystemInit+0x11c>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <SystemInit+0x11c>)
 800165a:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <SystemInit+0x124>)
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800165e:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <SystemInit+0x11c>)
 8001660:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <SystemInit+0x128>)
 8001662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <SystemInit+0x11c>)
 8001666:	4a28      	ldr	r2, [pc, #160]	@ (8001708 <SystemInit+0x12c>)
 8001668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800166a:	4b23      	ldr	r3, [pc, #140]	@ (80016f8 <SystemInit+0x11c>)
 800166c:	2200      	movs	r2, #0
 800166e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001670:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <SystemInit+0x11c>)
 8001672:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <SystemInit+0x12c>)
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <SystemInit+0x11c>)
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800167c:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <SystemInit+0x11c>)
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <SystemInit+0x12c>)
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <SystemInit+0x11c>)
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <SystemInit+0x11c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1a      	ldr	r2, [pc, #104]	@ (80016f8 <SystemInit+0x11c>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <SystemInit+0x11c>)
 8001696:	2200      	movs	r2, #0
 8001698:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <SystemInit+0x130>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <SystemInit+0x134>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016a6:	d202      	bcs.n	80016ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <SystemInit+0x138>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <SystemInit+0x11c>)
 80016b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d113      	bne.n	80016e4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <SystemInit+0x11c>)
 80016be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016c2:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <SystemInit+0x11c>)
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <SystemInit+0x13c>)
 80016ce:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016d2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <SystemInit+0x11c>)
 80016d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016da:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <SystemInit+0x11c>)
 80016dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	52002000 	.word	0x52002000
 80016f8:	58024400 	.word	0x58024400
 80016fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001700:	02020200 	.word	0x02020200
 8001704:	01ff0000 	.word	0x01ff0000
 8001708:	01010280 	.word	0x01010280
 800170c:	5c001000 	.word	0x5c001000
 8001710:	ffff0000 	.word	0xffff0000
 8001714:	51008108 	.word	0x51008108
 8001718:	52004000 	.word	0x52004000

0800171c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <ExitRun0Mode+0x2c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a08      	ldr	r2, [pc, #32]	@ (8001748 <ExitRun0Mode+0x2c>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800172c:	bf00      	nop
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <ExitRun0Mode+0x2c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f9      	beq.n	800172e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	58024800 	.word	0x58024800

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001788 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001750:	f7ff ffe4 	bl	800171c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001754:	f7ff ff42 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	@ (8001790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	@ (800179c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177e:	f006 f86d 	bl	800785c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001782:	f7ff f827 	bl	80007d4 <main>
  bx  lr
 8001786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001788:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800178c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001790:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001794:	0800799c 	.word	0x0800799c
  ldr r2, =_sbss
 8001798:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 800179c:	240005a8 	.word	0x240005a8

080017a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC3_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f000 f97c 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017b0:	f002 fd5a 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_Init+0x68>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	4913      	ldr	r1, [pc, #76]	@ (8001810 <HAL_Init+0x6c>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_Init+0x68>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <HAL_Init+0x6c>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <HAL_Init+0x70>)
 80017e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_Init+0x74>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f814 	bl	800181c <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e002      	b.n	8001804 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017fe:	f7ff fc37 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	58024400 	.word	0x58024400
 8001810:	08007954 	.word	0x08007954
 8001814:	24000018 	.word	0x24000018
 8001818:	24000014 	.word	0x24000014

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <HAL_InitTick+0x60>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e021      	b.n	8001874 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <HAL_InitTick+0x64>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_InitTick+0x60>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f961 	bl	8001b0e <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f92b 	bl	8001abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	@ (8001884 <HAL_InitTick+0x68>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	24000020 	.word	0x24000020
 8001880:	24000014 	.word	0x24000014
 8001884:	2400001c 	.word	0x2400001c

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	24000020 	.word	0x24000020
 80018ac:	2400045c 	.word	0x2400045c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2400045c 	.word	0x2400045c

080018c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_GetREVID+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0c1b      	lsrs	r3, r3, #16
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	5c001000 	.word	0x5c001000

080018e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80018f0:	4904      	ldr	r1, [pc, #16]	@ (8001904 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	58000400 	.word	0x58000400

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	4313      	orrs	r3, r2
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	05fa0000 	.word	0x05fa0000

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	@ (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	@ (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	@ (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f7ff ff8e 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff29 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff40 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff90 	bl	80019fc <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5f 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff33 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa4 	bl	8001a64 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b2c:	f3bf 8f5f 	dmb	sy
}
 8001b30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <HAL_MPU_Disable+0x28>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	4a06      	ldr	r2, [pc, #24]	@ (8001b50 <HAL_MPU_Disable+0x28>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_MPU_Disable+0x2c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	e000ed90 	.word	0xe000ed90

08001b58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_MPU_Enable+0x38>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_MPU_Enable+0x3c>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <HAL_MPU_Enable+0x3c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b76:	f3bf 8f4f 	dsb	sy
}
 8001b7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b7c:	f3bf 8f6f 	isb	sy
}
 8001b80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed90 	.word	0xe000ed90
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	785a      	ldrb	r2, [r3, #1]
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <HAL_MPU_ConfigRegion+0x7c>)
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_MPU_ConfigRegion+0x7c>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <HAL_MPU_ConfigRegion+0x7c>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001bb4:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <HAL_MPU_ConfigRegion+0x7c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7b1b      	ldrb	r3, [r3, #12]
 8001bc0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7adb      	ldrb	r3, [r3, #11]
 8001bc6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7a9b      	ldrb	r3, [r3, #10]
 8001bce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7b5b      	ldrb	r3, [r3, #13]
 8001bd6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7b9b      	ldrb	r3, [r3, #14]
 8001bde:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001be0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7bdb      	ldrb	r3, [r3, #15]
 8001be6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001be8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7a5b      	ldrb	r3, [r3, #9]
 8001bee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bf8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c04:	6113      	str	r3, [r2, #16]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed90 	.word	0xe000ed90

08001c18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0e3      	b.n	8001df2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fa31 	bl	80010a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b6e      	ldr	r3, [pc, #440]	@ (8001dfc <HAL_ETH_Init+0x1e4>)
 8001c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c48:	4a6c      	ldr	r2, [pc, #432]	@ (8001dfc <HAL_ETH_Init+0x1e4>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c52:	4b6a      	ldr	r3, [pc, #424]	@ (8001dfc <HAL_ETH_Init+0x1e4>)
 8001c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7a1b      	ldrb	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fe39 	bl	80018e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c6e:	e003      	b.n	8001c78 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c70:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001c74:	f7ff fe34 	bl	80018e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001c78:	4b61      	ldr	r3, [pc, #388]	@ (8001e00 <HAL_ETH_Init+0x1e8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c94:	f7ff fe0c 	bl	80018b0 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c9a:	e011      	b.n	8001cc0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c9c:	f7ff fe08 	bl	80018b0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001caa:	d909      	bls.n	8001cc0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	22e0      	movs	r2, #224	@ 0xe0
 8001cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e098      	b.n	8001df2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e4      	bne.n	8001c9c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fe4a 	bl	800296c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cd8:	f002 fc40 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a49      	ldr	r2, [pc, #292]	@ (8001e04 <HAL_ETH_Init+0x1ec>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	0c9a      	lsrs	r2, r3, #18
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3a01      	subs	r2, #1
 8001cec:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f001 f82d 	bl	8002d50 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001d02:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d12:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	22e0      	movs	r2, #224	@ 0xe0
 8001d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e05d      	b.n	8001df2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d3e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001d42:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_ETH_Init+0x1f0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6952      	ldr	r2, [r2, #20]
 8001d4a:	0051      	lsls	r1, r2, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d56:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f001 f895 	bl	8002e8a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f001 f8db 	bl	8002f1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	3305      	adds	r3, #5
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	021a      	lsls	r2, r3, #8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	3303      	adds	r3, #3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	061a      	lsls	r2, r3, #24
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	3302      	adds	r3, #2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001da4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001db2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001db4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_ETH_Init+0x1f4>)
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_ETH_Init+0x1f8>)
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2210      	movs	r2, #16
 8001dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58000400 	.word	0x58000400
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	ffff8001 	.word	0xffff8001
 8001e0c:	0c020060 	.word	0x0c020060
 8001e10:	0c20c000 	.word	0x0c20c000

08001e14 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d165      	bne.n	8001ef2 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2204      	movs	r2, #4
 8001e38:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f96b 	bl	8002116 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e48:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e58:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e74:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e80:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001e8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e90:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0202 	orr.w	r2, r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed0:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001edc:	430b      	orrs	r3, r1
 8001ede:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ee2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2240      	movs	r2, #64	@ 0x40
 8001eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f0a:	2b40      	cmp	r3, #64	@ 0x40
 8001f0c:	d13f      	bne.n	8001f8e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f1e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f2e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f4a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0202 	bic.w	r2, r2, #2
 8001f80:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2210      	movs	r2, #16
 8001f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
  }
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0a2      	b.n	800210e <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fce:	2b40      	cmp	r3, #64	@ 0x40
 8001fd0:	d001      	beq.n	8001fd6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e09b      	b.n	800210e <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	3212      	adds	r2, #18
 8001fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fec:	f1c3 0304 	rsb	r3, r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ff2:	e064      	b.n	80020be <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d103      	bne.n	8002024 <HAL_ETH_ReadData+0x88>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d03a      	beq.n	800209a <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002060:	2301      	movs	r3, #1
 8002062:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f7fe ff86 	bl	8000f8a <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d902      	bls.n	80020ac <HAL_ETH_ReadData+0x110>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b04      	subs	r3, #4
 80020aa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	3212      	adds	r2, #18
 80020b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db06      	blt.n	80020d4 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d202      	bcs.n	80020d4 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d08f      	beq.n	8001ff4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	441a      	add	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f814 	bl	8002116 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b088      	sub	sp, #32
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002122:	2301      	movs	r3, #1
 8002124:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800212a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	3212      	adds	r2, #18
 8002132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002136:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800213c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800213e:	e038      	b.n	80021b2 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d112      	bne.n	800216e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fefb 	bl	8000f48 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	74fb      	strb	r3, [r7, #19]
 800215c:	e007      	b.n	800216e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	461a      	mov	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	461a      	mov	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01e      	beq.n	80021b2 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	e003      	b.n	800218e <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800218c:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d902      	bls.n	80021a0 <ETH_UpdateDescriptor+0x8a>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b04      	subs	r3, #4
 800219e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	3212      	adds	r2, #18
 80021a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021aa:	617b      	str	r3, [r7, #20]
      desccount--;
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <ETH_UpdateDescriptor+0xa8>
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1c0      	bne.n	8002140 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d01b      	beq.n	8002200 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	3303      	adds	r3, #3
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80021d2:	f3bf 8f5f 	dmb	sy
}
 80021d6:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6919      	ldr	r1, [r3, #16]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	18ca      	adds	r2, r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002222:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002230:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002234:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8002236:	4b6d      	ldr	r3, [pc, #436]	@ (80023ec <HAL_ETH_IRQHandler+0x1e4>)
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_ETH_IRQHandler+0x60>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00b      	beq.n	8002268 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002258:	461a      	mov	r2, r3
 800225a:	f248 0340 	movw	r3, #32832	@ 0x8040
 800225e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fec7 	bl	8000ff6 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d010      	beq.n	8002294 <HAL_ETH_IRQHandler+0x8c>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002284:	461a      	mov	r2, r3
 8002286:	f248 0301 	movw	r3, #32769	@ 0x8001
 800228a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe fea7 	bl	8000fe2 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d047      	beq.n	800232e <HAL_ETH_IRQHandler+0x126>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d042      	beq.n	800232e <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f043 0208 	orr.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01e      	beq.n	8002300 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ca:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80022ce:	f241 1302 	movw	r3, #4354	@ 0x1102
 80022d2:	4013      	ands	r3, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022f2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	22e0      	movs	r2, #224	@ 0xe0
 80022fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80022fe:	e013      	b.n	8002328 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002308:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800230c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800231e:	461a      	mov	r2, r3
 8002320:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002324:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f861 	bl	80023f0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d104      	bne.n	8002342 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	22e0      	movs	r2, #224	@ 0xe0
 8002364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f841 	bl	80023f0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00f      	beq.n	80023a0 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002388:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f836 	bl	8002404 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00f      	beq.n	80023ca <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f82b 	bl	8002418 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_ETH_IRQHandler+0x1e4>)
 80023d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023da:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f825 	bl	800242c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	58000080 	.word	0x58000080

080023f0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e03e      	b.n	80024e0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800246a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	055b      	lsls	r3, r3, #21
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f043 030c 	orr.w	r3, r3, #12
 800248e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80024a2:	f7ff fa05 	bl	80018b0 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024a8:	e009      	b.n	80024be <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80024aa:	f7ff fa01 	bl	80018b0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b8:	d901      	bls.n	80024be <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e010      	b.n	80024e0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ed      	bne.n	80024aa <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e03c      	b.n	8002584 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002512:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	055b      	lsls	r3, r3, #21
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 030c 	bic.w	r3, r3, #12
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HAL_ETH_WritePHYRegister+0xa4>)
 800254a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800254e:	4a0f      	ldr	r2, [pc, #60]	@ (800258c <HAL_ETH_WritePHYRegister+0xa4>)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002556:	f7ff f9ab 	bl	80018b0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800255c:	e009      	b.n	8002572 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800255e:	f7ff f9a7 	bl	80018b0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800256c:	d901      	bls.n	8002572 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e008      	b.n	8002584 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ed      	bne.n	800255e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40028000 	.word	0x40028000

08002590 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e1c3      	b.n	800292c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800271e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80027b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0e5b      	lsrs	r3, r3, #25
 80027ee:	f003 021f 	and.w	r2, r3, #31
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b29a      	uxth	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80028b8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028c8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e00b      	b.n	8002964 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002952:	2b10      	cmp	r3, #16
 8002954:	d105      	bne.n	8002962 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002956:	6839      	ldr	r1, [r7, #0]
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f857 	bl	8002a0c <ETH_SetMACConfig>

    return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
  }
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800297c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002984:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002986:	f001 fde9 	bl	800455c <HAL_RCC_GetHCLKFreq>
 800298a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4a1a      	ldr	r2, [pc, #104]	@ (80029f8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d804      	bhi.n	800299e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e022      	b.n	80029e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4a16      	ldr	r2, [pc, #88]	@ (80029fc <HAL_ETH_SetMDIOClockRange+0x90>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d204      	bcs.n	80029b0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e019      	b.n	80029e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4a13      	ldr	r2, [pc, #76]	@ (8002a00 <HAL_ETH_SetMDIOClockRange+0x94>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d915      	bls.n	80029e4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <HAL_ETH_SetMDIOClockRange+0x98>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d804      	bhi.n	80029ca <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e00c      	b.n	80029e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002a08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d804      	bhi.n	80029dc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e003      	b.n	80029e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80029e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	02160ebf 	.word	0x02160ebf
 80029fc:	03938700 	.word	0x03938700
 8002a00:	05f5e0ff 	.word	0x05f5e0ff
 8002a04:	08f0d17f 	.word	0x08f0d17f
 8002a08:	0ee6b27f 	.word	0x0ee6b27f

08002a0c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	791b      	ldrb	r3, [r3, #4]
 8002a24:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	7b1b      	ldrb	r3, [r3, #12]
 8002a2c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	7b5b      	ldrb	r3, [r3, #13]
 8002a34:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	7b9b      	ldrb	r3, [r3, #14]
 8002a3c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	7bdb      	ldrb	r3, [r3, #15]
 8002a44:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	7c12      	ldrb	r2, [r2, #16]
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d102      	bne.n	8002a56 <ETH_SetMACConfig+0x4a>
 8002a50:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a54:	e000      	b.n	8002a58 <ETH_SetMACConfig+0x4c>
 8002a56:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	7c52      	ldrb	r2, [r2, #17]
 8002a5e:	2a00      	cmp	r2, #0
 8002a60:	d102      	bne.n	8002a68 <ETH_SetMACConfig+0x5c>
 8002a62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a66:	e000      	b.n	8002a6a <ETH_SetMACConfig+0x5e>
 8002a68:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7c9b      	ldrb	r3, [r3, #18]
 8002a70:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a72:	431a      	orrs	r2, r3
               macconf->Speed |
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a78:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002a7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	7f1b      	ldrb	r3, [r3, #28]
 8002a84:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002a86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	7f5b      	ldrb	r3, [r3, #29]
 8002a8c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	7f92      	ldrb	r2, [r2, #30]
 8002a94:	2a00      	cmp	r2, #0
 8002a96:	d102      	bne.n	8002a9e <ETH_SetMACConfig+0x92>
 8002a98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a9c:	e000      	b.n	8002aa0 <ETH_SetMACConfig+0x94>
 8002a9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002aa0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	7fdb      	ldrb	r3, [r3, #31]
 8002aa6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002aa8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ab0:	2a00      	cmp	r2, #0
 8002ab2:	d102      	bne.n	8002aba <ETH_SetMACConfig+0xae>
 8002ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ab8:	e000      	b.n	8002abc <ETH_SetMACConfig+0xb0>
 8002aba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002abc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ac2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002aca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002acc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b56      	ldr	r3, [pc, #344]	@ (8002c38 <ETH_SetMACConfig+0x22c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002af6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002af8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b00:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b0a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	d102      	bne.n	8002b1e <ETH_SetMACConfig+0x112>
 8002b18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b1c:	e000      	b.n	8002b20 <ETH_SetMACConfig+0x114>
 8002b1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b20:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <ETH_SetMACConfig+0x230>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b44:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <ETH_SetMACConfig+0x234>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b68:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d101      	bne.n	8002b7e <ETH_SetMACConfig+0x172>
 8002b7a:	2280      	movs	r2, #128	@ 0x80
 8002b7c:	e000      	b.n	8002b80 <ETH_SetMACConfig+0x174>
 8002b7e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002b80:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b86:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b92:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002b96:	4013      	ands	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002ba8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002bb0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	f023 0103 	bic.w	r1, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002bd6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	d101      	bne.n	8002bfa <ETH_SetMACConfig+0x1ee>
 8002bf6:	2240      	movs	r2, #64	@ 0x40
 8002bf8:	e000      	b.n	8002bfc <ETH_SetMACConfig+0x1f0>
 8002bfa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002bfc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002c04:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002c0e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002c1c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	00048083 	.word	0x00048083
 8002c3c:	c0f88000 	.word	0xc0f88000
 8002c40:	fffffef0 	.word	0xfffffef0

08002c44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <ETH_SetDMAConfig+0xf8>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	6811      	ldr	r1, [r2, #0]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c6a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	791b      	ldrb	r3, [r3, #4]
 8002c70:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	7b1b      	ldrb	r3, [r3, #12]
 8002c7c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d40 <ETH_SetDMAConfig+0xfc>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	430b      	orrs	r3, r1
 8002c98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c9c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	7b5b      	ldrb	r3, [r3, #13]
 8002ca2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002cb8:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <ETH_SetDMAConfig+0x100>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cc8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	7d1b      	ldrb	r3, [r3, #20]
 8002cd4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cd6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	7f5b      	ldrb	r3, [r3, #29]
 8002cdc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cea:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <ETH_SetDMAConfig+0x104>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cfe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	7f1b      	ldrb	r3, [r3, #28]
 8002d06:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d18:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <ETH_SetDMAConfig+0x108>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	68f9      	ldr	r1, [r7, #12]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d2c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	ffff87fd 	.word	0xffff87fd
 8002d40:	ffff2ffe 	.word	0xffff2ffe
 8002d44:	fffec000 	.word	0xfffec000
 8002d48:	ffc0efef 	.word	0xffc0efef
 8002d4c:	7fc0ffff 	.word	0x7fc0ffff

08002d50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0a4      	sub	sp, #144	@ 0x90
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d90:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002da8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002dac:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002de8:	2320      	movs	r3, #32
 8002dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dfa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e04:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fde6 	bl	8002a0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e5a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e70:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fee1 	bl	8002c44 <ETH_SetDMAConfig>
}
 8002e82:	bf00      	nop
 8002e84:	3790      	adds	r7, #144	@ 0x90
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e01d      	b.n	8002ed4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	3206      	adds	r2, #6
 8002eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d9de      	bls.n	8002e98 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2303      	movs	r3, #3
 8002eec:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002efc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f0c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e023      	b.n	8002f72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6919      	ldr	r1, [r3, #16]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	3212      	adds	r2, #18
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d9d8      	bls.n	8002f2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fe6:	4b89      	ldr	r3, [pc, #548]	@ (800320c <HAL_GPIO_Init+0x234>)
 8002fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fea:	e194      	b.n	8003316 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8186 	beq.w	8003310 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d005      	beq.n	800301c <HAL_GPIO_Init+0x44>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d130      	bne.n	800307e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003052:	2201      	movs	r2, #1
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0201 	and.w	r2, r3, #1
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b03      	cmp	r3, #3
 8003088:	d017      	beq.n	80030ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d123      	bne.n	800310e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	69b9      	ldr	r1, [r7, #24]
 800310a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80e0 	beq.w	8003310 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003150:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <HAL_GPIO_Init+0x238>)
 8003152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003156:	4a2e      	ldr	r2, [pc, #184]	@ (8003210 <HAL_GPIO_Init+0x238>)
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <HAL_GPIO_Init+0x238>)
 8003162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800316e:	4a29      	ldr	r2, [pc, #164]	@ (8003214 <HAL_GPIO_Init+0x23c>)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <HAL_GPIO_Init+0x240>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d052      	beq.n	8003240 <HAL_GPIO_Init+0x268>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1f      	ldr	r2, [pc, #124]	@ (800321c <HAL_GPIO_Init+0x244>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d031      	beq.n	8003206 <HAL_GPIO_Init+0x22e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003220 <HAL_GPIO_Init+0x248>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <HAL_GPIO_Init+0x22a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003224 <HAL_GPIO_Init+0x24c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d025      	beq.n	80031fe <HAL_GPIO_Init+0x226>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_GPIO_Init+0x250>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <HAL_GPIO_Init+0x222>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_GPIO_Init+0x254>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_GPIO_Init+0x21e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_GPIO_Init+0x258>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_Init+0x21a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a19      	ldr	r2, [pc, #100]	@ (8003234 <HAL_GPIO_Init+0x25c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_GPIO_Init+0x216>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_GPIO_Init+0x260>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_Init+0x212>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a17      	ldr	r2, [pc, #92]	@ (800323c <HAL_GPIO_Init+0x264>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_GPIO_Init+0x20e>
 80031e2:	2309      	movs	r3, #9
 80031e4:	e02d      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 80031e6:	230a      	movs	r3, #10
 80031e8:	e02b      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 80031ea:	2308      	movs	r3, #8
 80031ec:	e029      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e027      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 80031f2:	2306      	movs	r3, #6
 80031f4:	e025      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e023      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e021      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 80031fe:	2303      	movs	r3, #3
 8003200:	e01f      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 8003202:	2302      	movs	r3, #2
 8003204:	e01d      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 8003206:	2301      	movs	r3, #1
 8003208:	e01b      	b.n	8003242 <HAL_GPIO_Init+0x26a>
 800320a:	bf00      	nop
 800320c:	58000080 	.word	0x58000080
 8003210:	58024400 	.word	0x58024400
 8003214:	58000400 	.word	0x58000400
 8003218:	58020000 	.word	0x58020000
 800321c:	58020400 	.word	0x58020400
 8003220:	58020800 	.word	0x58020800
 8003224:	58020c00 	.word	0x58020c00
 8003228:	58021000 	.word	0x58021000
 800322c:	58021400 	.word	0x58021400
 8003230:	58021800 	.word	0x58021800
 8003234:	58021c00 	.word	0x58021c00
 8003238:	58022000 	.word	0x58022000
 800323c:	58022400 	.word	0x58022400
 8003240:	2300      	movs	r3, #0
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003252:	4938      	ldr	r1, [pc, #224]	@ (8003334 <HAL_GPIO_Init+0x35c>)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003286:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800328e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	3301      	adds	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	f47f ae63 	bne.w	8002fec <HAL_GPIO_Init+0x14>
  }
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	3724      	adds	r7, #36	@ 0x24
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	58000400 	.word	0x58000400

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	619a      	str	r2, [r3, #24]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e08b      	b.n	8003496 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd ff3a 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	@ 0x24
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e006      	b.n	80033f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d108      	bne.n	800340e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	e007      	b.n	800341e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b1d      	ldr	r3, [pc, #116]	@ (80034a0 <HAL_I2C_Init+0x134>)
 800342a:	430b      	orrs	r3, r1
 800342c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800343c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	02008000 	.word	0x02008000

080034a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d138      	bne.n	800352c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e032      	b.n	800352e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b20      	cmp	r3, #32
 800354e:	d139      	bne.n	80035c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800355a:	2302      	movs	r3, #2
 800355c:	e033      	b.n	80035c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2224      	movs	r2, #36	@ 0x24
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800358c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035dc:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d00a      	beq.n	80035fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035e8:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e01f      	b.n	800363a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e01d      	b.n	800363a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035fe:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	490f      	ldr	r1, [pc, #60]	@ (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4313      	orrs	r3, r2
 800360c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800360e:	f7fe f94f 	bl	80018b0 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003614:	e009      	b.n	800362a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003616:	f7fe f94b 	bl	80018b0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003624:	d901      	bls.n	800362a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e007      	b.n	800363a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003636:	d1ee      	bne.n	8003616 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	58024800 	.word	0x58024800

08003648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	@ 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f000 bc48 	b.w	8003eec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8088 	beq.w	800377a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366a:	4b99      	ldr	r3, [pc, #612]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003674:	4b96      	ldr	r3, [pc, #600]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	2b10      	cmp	r3, #16
 800367e:	d007      	beq.n	8003690 <HAL_RCC_OscConfig+0x48>
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	2b18      	cmp	r3, #24
 8003684:	d111      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	4b8f      	ldr	r3, [pc, #572]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d06d      	beq.n	8003778 <HAL_RCC_OscConfig+0x130>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d169      	bne.n	8003778 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f000 bc21 	b.w	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x7a>
 80036b4:	4b86      	ldr	r3, [pc, #536]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a85      	ldr	r2, [pc, #532]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e02e      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x9c>
 80036ca:	4b81      	ldr	r3, [pc, #516]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a80      	ldr	r2, [pc, #512]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b7e      	ldr	r3, [pc, #504]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7d      	ldr	r2, [pc, #500]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0xc0>
 80036ee:	4b78      	ldr	r3, [pc, #480]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a77      	ldr	r2, [pc, #476]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b75      	ldr	r3, [pc, #468]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a74      	ldr	r2, [pc, #464]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 8003708:	4b71      	ldr	r3, [pc, #452]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a70      	ldr	r2, [pc, #448]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b6e      	ldr	r3, [pc, #440]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6d      	ldr	r2, [pc, #436]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe f8c2 	bl	80018b0 <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe f8be 	bl	80018b0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	@ 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e3d4      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003742:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xe8>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe f8ae 	bl	80018b0 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe f8aa 	bl	80018b0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	@ 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e3c0      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800376a:	4b59      	ldr	r3, [pc, #356]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x110>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80ca 	beq.w	800391c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003788:	4b51      	ldr	r3, [pc, #324]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003790:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003792:	4b4f      	ldr	r3, [pc, #316]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_RCC_OscConfig+0x166>
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2b18      	cmp	r3, #24
 80037a2:	d156      	bne.n	8003852 <HAL_RCC_OscConfig+0x20a>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d151      	bne.n	8003852 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ae:	4b48      	ldr	r3, [pc, #288]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x17e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e392      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c6:	4b42      	ldr	r3, [pc, #264]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 0219 	bic.w	r2, r3, #25
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	493f      	ldr	r1, [pc, #252]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe f86a 	bl	80018b0 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fe f866 	bl	80018b0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e37c      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f2:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	f7fe f863 	bl	80018c8 <HAL_GetREVID>
 8003802:	4603      	mov	r3, r0
 8003804:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003808:	4293      	cmp	r3, r2
 800380a:	d817      	bhi.n	800383c <HAL_RCC_OscConfig+0x1f4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b40      	cmp	r3, #64	@ 0x40
 8003812:	d108      	bne.n	8003826 <HAL_RCC_OscConfig+0x1de>
 8003814:	4b2e      	ldr	r3, [pc, #184]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800381c:	4a2c      	ldr	r2, [pc, #176]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003822:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	e07a      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	031b      	lsls	r3, r3, #12
 8003834:	4926      	ldr	r1, [pc, #152]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383a:	e06f      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	4921      	ldr	r1, [pc, #132]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	e064      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d047      	beq.n	80038ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0219 	bic.w	r2, r3, #25
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	491a      	ldr	r1, [pc, #104]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe f820 	bl	80018b0 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003874:	f7fe f81c 	bl	80018b0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e332      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003886:	4b12      	ldr	r3, [pc, #72]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	f7fe f819 	bl	80018c8 <HAL_GetREVID>
 8003896:	4603      	mov	r3, r0
 8003898:	f241 0203 	movw	r2, #4099	@ 0x1003
 800389c:	4293      	cmp	r3, r2
 800389e:	d819      	bhi.n	80038d4 <HAL_RCC_OscConfig+0x28c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	d108      	bne.n	80038ba <HAL_RCC_OscConfig+0x272>
 80038a8:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80038b0:	4a07      	ldr	r2, [pc, #28]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b6:	6053      	str	r3, [r2, #4]
 80038b8:	e030      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	031b      	lsls	r3, r3, #12
 80038c8:	4901      	ldr	r1, [pc, #4]	@ (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
 80038ce:	e025      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
 80038d0:	58024400 	.word	0x58024400
 80038d4:	4b9a      	ldr	r3, [pc, #616]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4997      	ldr	r1, [pc, #604]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	e018      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b95      	ldr	r3, [pc, #596]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a94      	ldr	r2, [pc, #592]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd ffdb 	bl	80018b0 <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fd ffd7 	bl	80018b0 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e2ed      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003910:	4b8b      	ldr	r3, [pc, #556]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a9 	beq.w	8003a7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392a:	4b85      	ldr	r3, [pc, #532]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003932:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003934:	4b82      	ldr	r3, [pc, #520]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d007      	beq.n	8003950 <HAL_RCC_OscConfig+0x308>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b18      	cmp	r3, #24
 8003944:	d13a      	bne.n	80039bc <HAL_RCC_OscConfig+0x374>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d135      	bne.n	80039bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003950:	4b7b      	ldr	r3, [pc, #492]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_OscConfig+0x320>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b80      	cmp	r3, #128	@ 0x80
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e2c1      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003968:	f7fd ffae 	bl	80018c8 <HAL_GetREVID>
 800396c:	4603      	mov	r3, r0
 800396e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003972:	4293      	cmp	r3, r2
 8003974:	d817      	bhi.n	80039a6 <HAL_RCC_OscConfig+0x35e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	2b20      	cmp	r3, #32
 800397c:	d108      	bne.n	8003990 <HAL_RCC_OscConfig+0x348>
 800397e:	4b70      	ldr	r3, [pc, #448]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003986:	4a6e      	ldr	r2, [pc, #440]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003988:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800398c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800398e:	e075      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003990:	4b6b      	ldr	r3, [pc, #428]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	069b      	lsls	r3, r3, #26
 800399e:	4968      	ldr	r1, [pc, #416]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039a4:	e06a      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a6:	4b66      	ldr	r3, [pc, #408]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	4962      	ldr	r1, [pc, #392]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ba:	e05f      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d042      	beq.n	8003a4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd ff6e 	bl	80018b0 <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039d8:	f7fd ff6a 	bl	80018b0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e280      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ea:	4b55      	ldr	r3, [pc, #340]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039f6:	f7fd ff67 	bl	80018c8 <HAL_GetREVID>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d817      	bhi.n	8003a34 <HAL_RCC_OscConfig+0x3ec>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d108      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3d6>
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a14:	4a4a      	ldr	r2, [pc, #296]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a1a:	6053      	str	r3, [r2, #4]
 8003a1c:	e02e      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
 8003a1e:	4b48      	ldr	r3, [pc, #288]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	069b      	lsls	r3, r3, #26
 8003a2c:	4944      	ldr	r1, [pc, #272]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
 8003a32:	e023      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
 8003a34:	4b42      	ldr	r3, [pc, #264]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	493f      	ldr	r1, [pc, #252]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60cb      	str	r3, [r1, #12]
 8003a48:	e018      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fd ff2b 	bl	80018b0 <HAL_GetTick>
 8003a5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a5e:	f7fd ff27 	bl	80018b0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e23d      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a70:	4b33      	ldr	r3, [pc, #204]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d036      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d019      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a90:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a94:	4a2a      	ldr	r2, [pc, #168]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd ff08 	bl	80018b0 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fd ff04 	bl	80018b0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e21a      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ab6:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x45c>
 8003ac2:	e018      	b.n	8003af6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fd feee 	bl	80018b0 <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fd feea 	bl	80018b0 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e200      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d039      	beq.n	8003b76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b16:	f7fd fecb 	bl	80018b0 <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7fd fec7 	bl	80018b0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1dd      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b30:	4b03      	ldr	r3, [pc, #12]	@ (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4d6>
 8003b3c:	e01b      	b.n	8003b76 <HAL_RCC_OscConfig+0x52e>
 8003b3e:	bf00      	nop
 8003b40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b44:	4b9b      	ldr	r3, [pc, #620]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a9a      	ldr	r2, [pc, #616]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b50:	f7fd feae 	bl	80018b0 <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b58:	f7fd feaa 	bl	80018b0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1c0      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b6a:	4b92      	ldr	r3, [pc, #584]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8081 	beq.w	8003c86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b84:	4b8c      	ldr	r3, [pc, #560]	@ (8003db8 <HAL_RCC_OscConfig+0x770>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a8b      	ldr	r2, [pc, #556]	@ (8003db8 <HAL_RCC_OscConfig+0x770>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b90:	f7fd fe8e 	bl	80018b0 <HAL_GetTick>
 8003b94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fd fe8a 	bl	80018b0 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1a0      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003baa:	4b83      	ldr	r3, [pc, #524]	@ (8003db8 <HAL_RCC_OscConfig+0x770>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_OscConfig+0x584>
 8003bbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bca:	e02d      	b.n	8003c28 <HAL_RCC_OscConfig+0x5e0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCC_OscConfig+0x5a6>
 8003bd4:	4b77      	ldr	r3, [pc, #476]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd8:	4a76      	ldr	r2, [pc, #472]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be0:	4b74      	ldr	r3, [pc, #464]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	4a73      	ldr	r2, [pc, #460]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bec:	e01c      	b.n	8003c28 <HAL_RCC_OscConfig+0x5e0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c8>
 8003bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	4a6e      	ldr	r2, [pc, #440]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c02:	4b6c      	ldr	r3, [pc, #432]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a6b      	ldr	r2, [pc, #428]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0x5e0>
 8003c10:	4b68      	ldr	r3, [pc, #416]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a67      	ldr	r2, [pc, #412]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1c:	4b65      	ldr	r3, [pc, #404]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a64      	ldr	r2, [pc, #400]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c22:	f023 0304 	bic.w	r3, r3, #4
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fd fe3e 	bl	80018b0 <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fd fe3a 	bl	80018b0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e14e      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c4e:	4b59      	ldr	r3, [pc, #356]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ee      	beq.n	8003c38 <HAL_RCC_OscConfig+0x5f0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fd fe28 	bl	80018b0 <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fd fe24 	bl	80018b0 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e138      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ee      	bne.n	8003c64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 812d 	beq.w	8003eea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c90:	4b48      	ldr	r3, [pc, #288]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c98:	2b18      	cmp	r3, #24
 8003c9a:	f000 80bd 	beq.w	8003e18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	f040 809e 	bne.w	8003de4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b42      	ldr	r3, [pc, #264]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a41      	ldr	r2, [pc, #260]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fdfc 	bl	80018b0 <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fdf8 	bl	80018b0 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e10e      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cce:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cda:	4b36      	ldr	r3, [pc, #216]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cde:	4b37      	ldr	r3, [pc, #220]	@ (8003dbc <HAL_RCC_OscConfig+0x774>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	430a      	orrs	r2, r1
 8003cee:	4931      	ldr	r1, [pc, #196]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	3b01      	subs	r3, #1
 8003d04:	025b      	lsls	r3, r3, #9
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d24:	4923      	ldr	r1, [pc, #140]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d2a:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d36:	4b1f      	ldr	r3, [pc, #124]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d3a:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <HAL_RCC_OscConfig+0x778>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d42:	00d2      	lsls	r2, r2, #3
 8003d44:	491b      	ldr	r1, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	f023 020c 	bic.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	4917      	ldr	r1, [pc, #92]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d5c:	4b15      	ldr	r3, [pc, #84]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	f023 0202 	bic.w	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	4912      	ldr	r1, [pc, #72]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d6e:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d72:	4a10      	ldr	r2, [pc, #64]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d92:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	4a07      	ldr	r2, [pc, #28]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a04      	ldr	r2, [pc, #16]	@ (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003da4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd fd81 	bl	80018b0 <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db0:	e011      	b.n	8003dd6 <HAL_RCC_OscConfig+0x78e>
 8003db2:	bf00      	nop
 8003db4:	58024400 	.word	0x58024400
 8003db8:	58024800 	.word	0x58024800
 8003dbc:	fffffc0c 	.word	0xfffffc0c
 8003dc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd fd74 	bl	80018b0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e08a      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x77c>
 8003de2:	e082      	b.n	8003eea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b43      	ldr	r3, [pc, #268]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a42      	ldr	r2, [pc, #264]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fd5e 	bl	80018b0 <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd fd5a 	bl	80018b0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e070      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x7b0>
 8003e16:	e068      	b.n	8003eea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e18:	4b36      	ldr	r3, [pc, #216]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e1e:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d031      	beq.n	8003e90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f003 0203 	and.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d12a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d122      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	0a5b      	lsrs	r3, r3, #9
 8003e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d108      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0e1b      	lsrs	r3, r3, #24
 8003e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e02b      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e94:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e98:	08db      	lsrs	r3, r3, #3
 8003e9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d01f      	beq.n	8003eea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003eaa:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb6:	f7fd fcfb 	bl	80018b0 <HAL_GetTick>
 8003eba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ebc:	bf00      	nop
 8003ebe:	f7fd fcf7 	bl	80018b0 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d0f9      	beq.n	8003ebe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ece:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <HAL_RCC_OscConfig+0x8b0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ed6:	00d2      	lsls	r2, r2, #3
 8003ed8:	4906      	ldr	r1, [pc, #24]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ede:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3730      	adds	r7, #48	@ 0x30
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	ffff0007 	.word	0xffff0007

08003efc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e19c      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b8a      	ldr	r3, [pc, #552]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b87      	ldr	r3, [pc, #540]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020f 	bic.w	r2, r3, #15
 8003f26:	4985      	ldr	r1, [pc, #532]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b83      	ldr	r3, [pc, #524]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e184      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	4b7b      	ldr	r3, [pc, #492]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d908      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f5c:	4b78      	ldr	r3, [pc, #480]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	4975      	ldr	r1, [pc, #468]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d010      	beq.n	8003f9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	4b70      	ldr	r3, [pc, #448]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d908      	bls.n	8003f9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	496a      	ldr	r1, [pc, #424]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	4b64      	ldr	r3, [pc, #400]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d908      	bls.n	8003fca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fb8:	4b61      	ldr	r3, [pc, #388]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	495e      	ldr	r1, [pc, #376]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	4b59      	ldr	r3, [pc, #356]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d908      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fe6:	4b56      	ldr	r3, [pc, #344]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4953      	ldr	r1, [pc, #332]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	4b4d      	ldr	r3, [pc, #308]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	429a      	cmp	r2, r3
 8004012:	d908      	bls.n	8004026 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004014:	4b4a      	ldr	r3, [pc, #296]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f023 020f 	bic.w	r2, r3, #15
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4947      	ldr	r1, [pc, #284]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004022:	4313      	orrs	r3, r2
 8004024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d055      	beq.n	80040de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004032:	4b43      	ldr	r3, [pc, #268]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4940      	ldr	r1, [pc, #256]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004040:	4313      	orrs	r3, r2
 8004042:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d107      	bne.n	800405c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800404c:	4b3c      	ldr	r3, [pc, #240]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d121      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0f6      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d107      	bne.n	8004074 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004064:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d115      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0ea      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800407c:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0de      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800408c:	4b2c      	ldr	r3, [pc, #176]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0d6      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800409c:	4b28      	ldr	r3, [pc, #160]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f023 0207 	bic.w	r2, r3, #7
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4925      	ldr	r1, [pc, #148]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ae:	f7fd fbff 	bl	80018b0 <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b6:	f7fd fbfb 	bl	80018b0 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0be      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	429a      	cmp	r2, r3
 80040dc:	d1eb      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d208      	bcs.n	800410c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fa:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	490e      	ldr	r1, [pc, #56]	@ (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004108:	4313      	orrs	r3, r2
 800410a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d214      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b08      	ldr	r3, [pc, #32]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 020f 	bic.w	r2, r3, #15
 8004122:	4906      	ldr	r1, [pc, #24]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b04      	ldr	r3, [pc, #16]	@ (800413c <HAL_RCC_ClockConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e086      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
 800413c:	52002000 	.word	0x52002000
 8004140:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	4b3f      	ldr	r3, [pc, #252]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800415c:	429a      	cmp	r2, r3
 800415e:	d208      	bcs.n	8004172 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004160:	4b3c      	ldr	r3, [pc, #240]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	4939      	ldr	r1, [pc, #228]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 800416e:	4313      	orrs	r3, r2
 8004170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	4b34      	ldr	r3, [pc, #208]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800418a:	429a      	cmp	r2, r3
 800418c:	d208      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800418e:	4b31      	ldr	r3, [pc, #196]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	492e      	ldr	r1, [pc, #184]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 800419c:	4313      	orrs	r3, r2
 800419e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d208      	bcs.n	80041ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041bc:	4b25      	ldr	r3, [pc, #148]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	4922      	ldr	r1, [pc, #136]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d208      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4917      	ldr	r1, [pc, #92]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041fc:	f000 f834 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	4912      	ldr	r1, [pc, #72]	@ (8004258 <HAL_RCC_ClockConfig+0x35c>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
 8004218:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800421a:	4b0e      	ldr	r3, [pc, #56]	@ (8004254 <HAL_RCC_ClockConfig+0x358>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <HAL_RCC_ClockConfig+0x35c>)
 8004224:	5cd3      	ldrb	r3, [r2, r3]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
 8004230:	4a0a      	ldr	r2, [pc, #40]	@ (800425c <HAL_RCC_ClockConfig+0x360>)
 8004232:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004234:	4a0a      	ldr	r2, [pc, #40]	@ (8004260 <HAL_RCC_ClockConfig+0x364>)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800423a:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <HAL_RCC_ClockConfig+0x368>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd faec 	bl	800181c <HAL_InitTick>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	58024400 	.word	0x58024400
 8004258:	08007954 	.word	0x08007954
 800425c:	24000018 	.word	0x24000018
 8004260:	24000014 	.word	0x24000014
 8004264:	2400001c 	.word	0x2400001c

08004268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	@ 0x24
 800426c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426e:	4bb3      	ldr	r3, [pc, #716]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004276:	2b18      	cmp	r3, #24
 8004278:	f200 8155 	bhi.w	8004526 <HAL_RCC_GetSysClockFreq+0x2be>
 800427c:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <HAL_RCC_GetSysClockFreq+0x1c>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	080042e9 	.word	0x080042e9
 8004288:	08004527 	.word	0x08004527
 800428c:	08004527 	.word	0x08004527
 8004290:	08004527 	.word	0x08004527
 8004294:	08004527 	.word	0x08004527
 8004298:	08004527 	.word	0x08004527
 800429c:	08004527 	.word	0x08004527
 80042a0:	08004527 	.word	0x08004527
 80042a4:	0800430f 	.word	0x0800430f
 80042a8:	08004527 	.word	0x08004527
 80042ac:	08004527 	.word	0x08004527
 80042b0:	08004527 	.word	0x08004527
 80042b4:	08004527 	.word	0x08004527
 80042b8:	08004527 	.word	0x08004527
 80042bc:	08004527 	.word	0x08004527
 80042c0:	08004527 	.word	0x08004527
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004527 	.word	0x08004527
 80042cc:	08004527 	.word	0x08004527
 80042d0:	08004527 	.word	0x08004527
 80042d4:	08004527 	.word	0x08004527
 80042d8:	08004527 	.word	0x08004527
 80042dc:	08004527 	.word	0x08004527
 80042e0:	08004527 	.word	0x08004527
 80042e4:	0800431b 	.word	0x0800431b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e8:	4b94      	ldr	r3, [pc, #592]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042f4:	4b91      	ldr	r3, [pc, #580]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	4a90      	ldr	r2, [pc, #576]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004306:	e111      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004308:	4b8d      	ldr	r3, [pc, #564]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800430a:	61bb      	str	r3, [r7, #24]
      break;
 800430c:	e10e      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800430e:	4b8d      	ldr	r3, [pc, #564]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004310:	61bb      	str	r3, [r7, #24]
      break;
 8004312:	e10b      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004314:	4b8c      	ldr	r3, [pc, #560]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004316:	61bb      	str	r3, [r7, #24]
      break;
 8004318:	e108      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800431a:	4b88      	ldr	r3, [pc, #544]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004324:	4b85      	ldr	r3, [pc, #532]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800432e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004330:	4b82      	ldr	r3, [pc, #520]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800433a:	4b80      	ldr	r3, [pc, #512]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433e:	08db      	lsrs	r3, r3, #3
 8004340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80e1 	beq.w	8004520 <HAL_RCC_GetSysClockFreq+0x2b8>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b02      	cmp	r3, #2
 8004362:	f000 8083 	beq.w	800446c <HAL_RCC_GetSysClockFreq+0x204>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b02      	cmp	r3, #2
 800436a:	f200 80a1 	bhi.w	80044b0 <HAL_RCC_GetSysClockFreq+0x248>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x114>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d056      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x1c0>
 800437a:	e099      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437c:	4b6f      	ldr	r3, [pc, #444]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02d      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004388:	4b6c      	ldr	r3, [pc, #432]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	4a6b      	ldr	r2, [pc, #428]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b2:	4b62      	ldr	r3, [pc, #392]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043e2:	e087      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004550 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f6:	4b51      	ldr	r3, [pc, #324]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004406:	ed97 6a02 	vldr	s12, [r7, #8]
 800440a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 800440e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800441a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004426:	e065      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004432:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004554 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443a:	4b40      	ldr	r3, [pc, #256]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444a:	ed97 6a02 	vldr	s12, [r7, #8]
 800444e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800445e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800446a:	e043      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004558 <HAL_RCC_GetSysClockFreq+0x2f0>
 800447a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447e:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004492:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044ae:	e021      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004554 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c2:	4b1e      	ldr	r3, [pc, #120]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 80044da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	0a5b      	lsrs	r3, r3, #9
 80044fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044fe:	3301      	adds	r3, #1
 8004500:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800450c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004518:	ee17 3a90 	vmov	r3, s15
 800451c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800451e:	e005      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
      break;
 8004524:	e002      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004526:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004528:	61bb      	str	r3, [r7, #24]
      break;
 800452a:	bf00      	nop
  }

  return sysclockfreq;
 800452c:	69bb      	ldr	r3, [r7, #24]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	@ 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
 8004540:	03d09000 	.word	0x03d09000
 8004544:	003d0900 	.word	0x003d0900
 8004548:	007a1200 	.word	0x007a1200
 800454c:	46000000 	.word	0x46000000
 8004550:	4c742400 	.word	0x4c742400
 8004554:	4a742400 	.word	0x4a742400
 8004558:	4af42400 	.word	0x4af42400

0800455c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004562:	f7ff fe81 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004566:	4602      	mov	r2, r0
 8004568:	4b10      	ldr	r3, [pc, #64]	@ (80045ac <HAL_RCC_GetHCLKFreq+0x50>)
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	490f      	ldr	r1, [pc, #60]	@ (80045b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004574:	5ccb      	ldrb	r3, [r1, r3]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	fa22 f303 	lsr.w	r3, r2, r3
 800457e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004580:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <HAL_RCC_GetHCLKFreq+0x50>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a07      	ldr	r2, [pc, #28]	@ (80045b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004598:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800459a:	4a07      	ldr	r2, [pc, #28]	@ (80045b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045a0:	4b04      	ldr	r3, [pc, #16]	@ (80045b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	58024400 	.word	0x58024400
 80045b0:	08007954 	.word	0x08007954
 80045b4:	24000018 	.word	0x24000018
 80045b8:	24000014 	.word	0x24000014

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045c0:	f7ff ffcc 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4904      	ldr	r1, [pc, #16]	@ (80045e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	58024400 	.word	0x58024400
 80045e4:	08007954 	.word	0x08007954

080045e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045ec:	f7ff ffb6 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	@ (8004610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	58024400 	.word	0x58024400
 8004610:	08007954 	.word	0x08007954

08004614 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004618:	b0ca      	sub	sp, #296	@ 0x128
 800461a:	af00      	add	r7, sp, #0
 800461c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004626:	2300      	movs	r3, #0
 8004628:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004638:	2500      	movs	r5, #0
 800463a:	ea54 0305 	orrs.w	r3, r4, r5
 800463e:	d049      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004646:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800464a:	d02f      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800464c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004650:	d828      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004656:	d01a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004658:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800465c:	d822      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004666:	d007      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004668:	e01c      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466a:	4bb8      	ldr	r3, [pc, #736]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	4ab7      	ldr	r2, [pc, #732]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004676:	e01a      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467c:	3308      	adds	r3, #8
 800467e:	2102      	movs	r1, #2
 8004680:	4618      	mov	r0, r3
 8004682:	f001 fc8f 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800468c:	e00f      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	3328      	adds	r3, #40	@ 0x28
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f001 fd36 	bl	8006108 <RCCEx_PLL3_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046b6:	4ba5      	ldr	r3, [pc, #660]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c4:	4aa1      	ldr	r2, [pc, #644]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80046e0:	f04f 0900 	mov.w	r9, #0
 80046e4:	ea58 0309 	orrs.w	r3, r8, r9
 80046e8:	d047      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d82a      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046f4:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004711 	.word	0x08004711
 8004700:	0800471f 	.word	0x0800471f
 8004704:	08004735 	.word	0x08004735
 8004708:	08004753 	.word	0x08004753
 800470c:	08004753 	.word	0x08004753
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004710:	4b8e      	ldr	r3, [pc, #568]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	4a8d      	ldr	r2, [pc, #564]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800471c:	e01a      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	3308      	adds	r3, #8
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f001 fc3c 	bl	8005fa4 <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004732:	e00f      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	3328      	adds	r3, #40	@ 0x28
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f001 fce3 	bl	8006108 <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004750:	e000      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800475c:	4b7b      	ldr	r3, [pc, #492]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004760:	f023 0107 	bic.w	r1, r3, #7
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	4a78      	ldr	r2, [pc, #480]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004770:	e003      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004786:	f04f 0b00 	mov.w	fp, #0
 800478a:	ea5a 030b 	orrs.w	r3, sl, fp
 800478e:	d04c      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479a:	d030      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800479c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a0:	d829      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80047a4:	d02d      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047a8:	d825      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047aa:	2b80      	cmp	r3, #128	@ 0x80
 80047ac:	d018      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047ae:	2b80      	cmp	r3, #128	@ 0x80
 80047b0:	d821      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047b6:	2b40      	cmp	r3, #64	@ 0x40
 80047b8:	d007      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047ba:	e01c      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047bc:	4b63      	ldr	r3, [pc, #396]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	4a62      	ldr	r2, [pc, #392]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047c8:	e01c      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	3308      	adds	r3, #8
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fbe6 	bl	8005fa4 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047de:	e011      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e4:	3328      	adds	r3, #40	@ 0x28
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fc8d 	bl	8006108 <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047f4:	e006      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047fc:	e002      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800480c:	4b4f      	ldr	r3, [pc, #316]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800480e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004810:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	4a4c      	ldr	r2, [pc, #304]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481c:	430b      	orrs	r3, r1
 800481e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004820:	e003      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004836:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800483a:	2300      	movs	r3, #0
 800483c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004840:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d053      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004852:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004856:	d035      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800485c:	d82e      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800485e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004862:	d031      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004864:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004868:	d828      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800486a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800486e:	d01a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004874:	d822      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800487a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800487e:	d007      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004880:	e01c      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004882:	4b32      	ldr	r3, [pc, #200]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	4a31      	ldr	r2, [pc, #196]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800488c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800488e:	e01c      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	3308      	adds	r3, #8
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fb83 	bl	8005fa4 <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048a4:	e011      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	3328      	adds	r3, #40	@ 0x28
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fc2a 	bl	8006108 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ba:	e006      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048d2:	4b1e      	ldr	r3, [pc, #120]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048e2:	4a1a      	ldr	r2, [pc, #104]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004908:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d056      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800491a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800491e:	d038      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004924:	d831      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004926:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800492a:	d034      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800492c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004930:	d82b      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004936:	d01d      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800493c:	d825      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004942:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004948:	e01f      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800494a:	bf00      	nop
 800494c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004950:	4ba2      	ldr	r3, [pc, #648]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	4aa1      	ldr	r2, [pc, #644]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800495c:	e01c      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	3308      	adds	r3, #8
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fb1c 	bl	8005fa4 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	3328      	adds	r3, #40	@ 0x28
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fbc3 	bl	8006108 <RCCEx_PLL3_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049a0:	4b8e      	ldr	r3, [pc, #568]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049b0:	4a8a      	ldr	r2, [pc, #552]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b2:	430b      	orrs	r3, r1
 80049b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049b6:	e003      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d03a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	2b30      	cmp	r3, #48	@ 0x30
 80049e8:	d01f      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80049ea:	2b30      	cmp	r3, #48	@ 0x30
 80049ec:	d819      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d00c      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d815      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d019      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d111      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fe:	4b77      	ldr	r3, [pc, #476]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	4a76      	ldr	r2, [pc, #472]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a0a:	e011      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	3308      	adds	r3, #8
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 fac5 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a28:	e002      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a38:	4b68      	ldr	r3, [pc, #416]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a46:	4a65      	ldr	r2, [pc, #404]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d051      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a80:	d035      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a86:	d82e      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a8c:	d031      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a92:	d828      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a98:	d01a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a9e:	d822      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa8:	d007      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004aaa:	e01c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aac:	4b4b      	ldr	r3, [pc, #300]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ab8:	e01c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	3308      	adds	r3, #8
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fa6e 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ace:	e011      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad4:	3328      	adds	r3, #40	@ 0x28
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fb15 	bl	8006108 <RCCEx_PLL3_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ae4:	e006      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aec:	e002      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004afc:	4b37      	ldr	r3, [pc, #220]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0a:	4a34      	ldr	r2, [pc, #208]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d056      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b44:	d033      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b4a:	d82c      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b50:	d02f      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b56:	d826      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b62:	d820      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b68:	d012      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b6e:	d81a      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d022      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b78:	d115      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	3308      	adds	r3, #8
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fa0e 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b8e:	e015      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b94:	3328      	adds	r3, #40	@ 0x28
 8004b96:	2101      	movs	r1, #1
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 fab5 	bl	8006108 <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e004      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10d      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bd2:	4a02      	ldr	r2, [pc, #8]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bd8:	e006      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bda:	bf00      	nop
 8004bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bfe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d055      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c14:	d033      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c1a:	d82c      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c20:	d02f      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c26:	d826      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c2c:	d02b      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c32:	d820      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c38:	d012      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c3e:	d81a      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d022      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c48:	d115      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4e:	3308      	adds	r3, #8
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 f9a6 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c5e:	e015      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c64:	3328      	adds	r3, #40	@ 0x28
 8004c66:	2101      	movs	r1, #1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fa4d 	bl	8006108 <RCCEx_PLL3_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c74:	e00a      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c7e:	bf00      	nop
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c94:	4ba3      	ldr	r3, [pc, #652]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ca4:	4a9f      	ldr	r2, [pc, #636]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d037      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cde:	d00e      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ce4:	d816      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d018      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cee:	d111      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	4a8b      	ldr	r2, [pc, #556]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cfc:	e00f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d02:	3308      	adds	r3, #8
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 f94c 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d26:	4b7f      	ldr	r3, [pc, #508]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d34:	4a7b      	ldr	r2, [pc, #492]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d039      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d81c      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004db1 	.word	0x08004db1
 8004d78:	08004d85 	.word	0x08004d85
 8004d7c:	08004d93 	.word	0x08004d93
 8004d80:	08004db1 	.word	0x08004db1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4b67      	ldr	r3, [pc, #412]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	4a66      	ldr	r2, [pc, #408]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d90:	e00f      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	3308      	adds	r3, #8
 8004d98:	2102      	movs	r1, #2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f902 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dba:	4b5a      	ldr	r3, [pc, #360]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	f023 0103 	bic.w	r1, r3, #3
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc8:	4a56      	ldr	r2, [pc, #344]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004de4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004dee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f000 809f 	beq.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e06:	f7fc fd53 	bl	80018b0 <HAL_GetTick>
 8004e0a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fc fd4e 	bl	80018b0 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	@ 0x64
 8004e1e:	d903      	bls.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e26:	e005      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e28:	4b3f      	ldr	r3, [pc, #252]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ed      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d179      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e3c:	4b39      	ldr	r3, [pc, #228]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e48:	4053      	eors	r3, r2
 8004e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d015      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e52:	4b34      	ldr	r3, [pc, #208]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e5e:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e76:	4a2b      	ldr	r2, [pc, #172]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8a:	d118      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fd10 	bl	80018b0 <HAL_GetTick>
 8004e90:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e94:	e00d      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fc fd0b 	bl	80018b0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004eb0:	e005      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0eb      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d129      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ed8:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ee8:	091a      	lsrs	r2, r3, #4
 8004eea:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	4a0d      	ldr	r2, [pc, #52]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6113      	str	r3, [r2, #16]
 8004ef4:	e005      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4a0a      	ldr	r2, [pc, #40]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f00:	6113      	str	r3, [r2, #16]
 8004f02:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f04:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f12:	4a04      	ldr	r2, [pc, #16]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f18:	e00e      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004f22:	e009      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f24:	58024400 	.word	0x58024400
 8004f28:	58024800 	.word	0x58024800
 8004f2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f002 0301 	and.w	r3, r2, #1
 8004f44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f000 8089 	beq.w	800506c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f60:	2b28      	cmp	r3, #40	@ 0x28
 8004f62:	d86b      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f64:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08005045 	.word	0x08005045
 8004f70:	0800503d 	.word	0x0800503d
 8004f74:	0800503d 	.word	0x0800503d
 8004f78:	0800503d 	.word	0x0800503d
 8004f7c:	0800503d 	.word	0x0800503d
 8004f80:	0800503d 	.word	0x0800503d
 8004f84:	0800503d 	.word	0x0800503d
 8004f88:	0800503d 	.word	0x0800503d
 8004f8c:	08005011 	.word	0x08005011
 8004f90:	0800503d 	.word	0x0800503d
 8004f94:	0800503d 	.word	0x0800503d
 8004f98:	0800503d 	.word	0x0800503d
 8004f9c:	0800503d 	.word	0x0800503d
 8004fa0:	0800503d 	.word	0x0800503d
 8004fa4:	0800503d 	.word	0x0800503d
 8004fa8:	0800503d 	.word	0x0800503d
 8004fac:	08005027 	.word	0x08005027
 8004fb0:	0800503d 	.word	0x0800503d
 8004fb4:	0800503d 	.word	0x0800503d
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	0800503d 	.word	0x0800503d
 8004fc0:	0800503d 	.word	0x0800503d
 8004fc4:	0800503d 	.word	0x0800503d
 8004fc8:	0800503d 	.word	0x0800503d
 8004fcc:	08005045 	.word	0x08005045
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	0800503d 	.word	0x0800503d
 8004fdc:	0800503d 	.word	0x0800503d
 8004fe0:	0800503d 	.word	0x0800503d
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08005045 	.word	0x08005045
 8004ff0:	0800503d 	.word	0x0800503d
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800503d 	.word	0x0800503d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	0800503d 	.word	0x0800503d
 8005004:	0800503d 	.word	0x0800503d
 8005008:	0800503d 	.word	0x0800503d
 800500c:	08005045 	.word	0x08005045
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005014:	3308      	adds	r3, #8
 8005016:	2101      	movs	r1, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f000 ffc3 	bl	8005fa4 <RCCEx_PLL2_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005024:	e00f      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	3328      	adds	r3, #40	@ 0x28
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f001 f86a 	bl	8006108 <RCCEx_PLL3_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800503a:	e004      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005042:	e000      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800504e:	4bbf      	ldr	r3, [pc, #764]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005052:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800505c:	4abb      	ldr	r2, [pc, #748]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800505e:	430b      	orrs	r3, r1
 8005060:	6553      	str	r3, [r2, #84]	@ 0x54
 8005062:	e003      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800506c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f002 0302 	and.w	r3, r2, #2
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005082:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	d041      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005092:	2b05      	cmp	r3, #5
 8005094:	d824      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005096:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050e9 	.word	0x080050e9
 80050a0:	080050b5 	.word	0x080050b5
 80050a4:	080050cb 	.word	0x080050cb
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050e9 	.word	0x080050e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b8:	3308      	adds	r3, #8
 80050ba:	2101      	movs	r1, #1
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 ff71 	bl	8005fa4 <RCCEx_PLL2_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050c8:	e00f      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ce:	3328      	adds	r3, #40	@ 0x28
 80050d0:	2101      	movs	r1, #1
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f818 	bl	8006108 <RCCEx_PLL3_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80050e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050f2:	4b96      	ldr	r3, [pc, #600]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f6:	f023 0107 	bic.w	r1, r3, #7
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005100:	4a92      	ldr	r2, [pc, #584]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005102:	430b      	orrs	r3, r1
 8005104:	6553      	str	r3, [r2, #84]	@ 0x54
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800510c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f002 0304 	and.w	r3, r2, #4
 800511c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005126:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d044      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005138:	2b05      	cmp	r3, #5
 800513a:	d825      	bhi.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800513c:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005191 	.word	0x08005191
 8005148:	0800515d 	.word	0x0800515d
 800514c:	08005173 	.word	0x08005173
 8005150:	08005191 	.word	0x08005191
 8005154:	08005191 	.word	0x08005191
 8005158:	08005191 	.word	0x08005191
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005160:	3308      	adds	r3, #8
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f000 ff1d 	bl	8005fa4 <RCCEx_PLL2_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005170:	e00f      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005176:	3328      	adds	r3, #40	@ 0x28
 8005178:	2101      	movs	r1, #1
 800517a:	4618      	mov	r0, r3
 800517c:	f000 ffc4 	bl	8006108 <RCCEx_PLL3_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005186:	e004      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800518e:	e000      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519a:	4b6c      	ldr	r3, [pc, #432]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519e:	f023 0107 	bic.w	r1, r3, #7
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051aa:	4a68      	ldr	r2, [pc, #416]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f002 0320 	and.w	r3, r2, #32
 80051c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d055      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051e6:	d033      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80051e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ec:	d82c      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f2:	d02f      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f8:	d826      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051fe:	d02b      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005200:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005204:	d820      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800520a:	d012      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005210:	d81a      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d022      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521a:	d115      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	3308      	adds	r3, #8
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f000 febd 	bl	8005fa4 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005230:	e015      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	3328      	adds	r3, #40	@ 0x28
 8005238:	2102      	movs	r1, #2
 800523a:	4618      	mov	r0, r3
 800523c:	f000 ff64 	bl	8006108 <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005246:	e00a      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800524e:	e006      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005250:	bf00      	nop
 8005252:	e004      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800525c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005266:	4b39      	ldr	r3, [pc, #228]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005276:	4a35      	ldr	r2, [pc, #212]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005278:	430b      	orrs	r3, r1
 800527a:	6553      	str	r3, [r2, #84]	@ 0x54
 800527c:	e003      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800529c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4313      	orrs	r3, r2
 80052a4:	d058      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052b2:	d033      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052b8:	d82c      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052be:	d02f      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c4:	d826      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ca:	d02b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052d0:	d820      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052d6:	d012      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052dc:	d81a      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d022      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e6:	d115      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ec:	3308      	adds	r3, #8
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fe57 	bl	8005fa4 <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052fc:	e015      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005302:	3328      	adds	r3, #40	@ 0x28
 8005304:	2102      	movs	r1, #2
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fefe 	bl	8006108 <RCCEx_PLL3_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005312:	e00a      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800531a:	e006      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800531c:	bf00      	nop
 800531e:	e004      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005320:	bf00      	nop
 8005322:	e002      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005324:	bf00      	nop
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10e      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005332:	4b06      	ldr	r3, [pc, #24]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005342:	4a02      	ldr	r2, [pc, #8]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6593      	str	r3, [r2, #88]	@ 0x58
 8005348:	e006      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800534a:	bf00      	nop
 800534c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800536e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005372:	460b      	mov	r3, r1
 8005374:	4313      	orrs	r3, r2
 8005376:	d055      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005380:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005384:	d033      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005386:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800538a:	d82c      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800538c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005390:	d02f      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005396:	d826      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005398:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800539c:	d02b      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800539e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053a2:	d820      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053a8:	d012      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80053aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ae:	d81a      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d022      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b8:	d115      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053be:	3308      	adds	r3, #8
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fdee 	bl	8005fa4 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053ce:	e015      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d4:	3328      	adds	r3, #40	@ 0x28
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fe95 	bl	8006108 <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053e4:	e00a      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053ec:	e006      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053ee:	bf00      	nop
 80053f0:	e004      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053f2:	bf00      	nop
 80053f4:	e002      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005404:	4ba1      	ldr	r3, [pc, #644]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005408:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005410:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005414:	4a9d      	ldr	r2, [pc, #628]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005416:	430b      	orrs	r3, r1
 8005418:	6593      	str	r3, [r2, #88]	@ 0x58
 800541a:	e003      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f002 0308 	and.w	r3, r2, #8
 8005430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800543a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800543e:	460b      	mov	r3, r1
 8005440:	4313      	orrs	r3, r2
 8005442:	d01e      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005450:	d10c      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	3328      	adds	r3, #40	@ 0x28
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fe54 	bl	8006108 <RCCEx_PLL3_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800546c:	4b87      	ldr	r3, [pc, #540]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547c:	4a83      	ldr	r2, [pc, #524]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f002 0310 	and.w	r3, r2, #16
 800548e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005492:	2300      	movs	r3, #0
 8005494:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005498:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800549c:	460b      	mov	r3, r1
 800549e:	4313      	orrs	r3, r2
 80054a0:	d01e      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ae:	d10c      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	3328      	adds	r3, #40	@ 0x28
 80054b6:	2102      	movs	r1, #2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fe25 	bl	8006108 <RCCEx_PLL3_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ca:	4b70      	ldr	r3, [pc, #448]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054da:	4a6c      	ldr	r2, [pc, #432]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	d03e      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800550c:	d022      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800550e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005512:	d81b      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551c:	d00b      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800551e:	e015      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005524:	3308      	adds	r3, #8
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fd3b 	bl	8005fa4 <RCCEx_PLL2_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005534:	e00f      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553a:	3328      	adds	r3, #40	@ 0x28
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fde2 	bl	8006108 <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800554a:	e004      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800555e:	4b4b      	ldr	r3, [pc, #300]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005562:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800556e:	4a47      	ldr	r2, [pc, #284]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6593      	str	r3, [r2, #88]	@ 0x58
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800558a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800558c:	2300      	movs	r3, #0
 800558e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005590:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d03b      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055a6:	d01f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055ac:	d818      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055b2:	d003      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055b8:	d007      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055ba:	e011      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055bc:	4b33      	ldr	r3, [pc, #204]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	4a32      	ldr	r2, [pc, #200]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055c8:	e00f      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ce:	3328      	adds	r3, #40	@ 0x28
 80055d0:	2101      	movs	r1, #1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fd98 	bl	8006108 <RCCEx_PLL3_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80055de:	e004      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055e6:	e000      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80055e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f2:	4b26      	ldr	r3, [pc, #152]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005602:	4a22      	ldr	r2, [pc, #136]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005604:	430b      	orrs	r3, r1
 8005606:	6553      	str	r3, [r2, #84]	@ 0x54
 8005608:	e003      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800560e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800561e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005620:	2300      	movs	r3, #0
 8005622:	677b      	str	r3, [r7, #116]	@ 0x74
 8005624:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d034      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563c:	d007      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800563e:	e011      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005640:	4b12      	ldr	r3, [pc, #72]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	4a11      	ldr	r2, [pc, #68]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800564a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800564c:	e00e      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005652:	3308      	adds	r3, #8
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fca4 	bl	8005fa4 <RCCEx_PLL2_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005662:	e003      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800566a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10d      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005674:	4b05      	ldr	r3, [pc, #20]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005678:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005682:	4a02      	ldr	r2, [pc, #8]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005684:	430b      	orrs	r3, r1
 8005686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005688:	e006      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800568a:	bf00      	nop
 800568c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056a6:	2300      	movs	r3, #0
 80056a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056ae:	460b      	mov	r3, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d00c      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b8:	3328      	adds	r3, #40	@ 0x28
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fd23 	bl	8006108 <RCCEx_PLL3_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80056da:	663b      	str	r3, [r7, #96]	@ 0x60
 80056dc:	2300      	movs	r3, #0
 80056de:	667b      	str	r3, [r7, #100]	@ 0x64
 80056e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80056e4:	460b      	mov	r3, r1
 80056e6:	4313      	orrs	r3, r2
 80056e8:	d038      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f6:	d018      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80056f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056fc:	d811      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005702:	d014      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005708:	d80b      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d011      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800570e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005712:	d106      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005714:	4bc3      	ldr	r3, [pc, #780]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	4ac2      	ldr	r2, [pc, #776]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800571a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800571e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005728:	e004      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10b      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800573c:	4bb9      	ldr	r3, [pc, #740]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005740:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800574c:	4ab5      	ldr	r2, [pc, #724]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800574e:	430b      	orrs	r3, r1
 8005750:	6553      	str	r3, [r2, #84]	@ 0x54
 8005752:	e003      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800575c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005768:	65bb      	str	r3, [r7, #88]	@ 0x58
 800576a:	2300      	movs	r3, #0
 800576c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800576e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005778:	4baa      	ldr	r3, [pc, #680]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005786:	4aa7      	ldr	r2, [pc, #668]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005788:	430b      	orrs	r3, r1
 800578a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005798:	653b      	str	r3, [r7, #80]	@ 0x50
 800579a:	2300      	movs	r3, #0
 800579c:	657b      	str	r3, [r7, #84]	@ 0x54
 800579e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057a2:	460b      	mov	r3, r1
 80057a4:	4313      	orrs	r3, r2
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057a8:	4b9e      	ldr	r3, [pc, #632]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057b8:	4a9a      	ldr	r2, [pc, #616]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057cc:	2300      	movs	r3, #0
 80057ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80057d4:	460b      	mov	r3, r1
 80057d6:	4313      	orrs	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057da:	4b92      	ldr	r3, [pc, #584]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e8:	4a8e      	ldr	r2, [pc, #568]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80057fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80057fc:	2300      	movs	r3, #0
 80057fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005800:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d00e      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800580a:	4b86      	ldr	r3, [pc, #536]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	4a85      	ldr	r2, [pc, #532]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005810:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005814:	6113      	str	r3, [r2, #16]
 8005816:	4b83      	ldr	r3, [pc, #524]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005818:	6919      	ldr	r1, [r3, #16]
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005822:	4a80      	ldr	r2, [pc, #512]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005824:	430b      	orrs	r3, r1
 8005826:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005836:	2300      	movs	r3, #0
 8005838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800583a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005844:	4b77      	ldr	r3, [pc, #476]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005848:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	4a74      	ldr	r2, [pc, #464]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005854:	430b      	orrs	r3, r1
 8005856:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005864:	633b      	str	r3, [r7, #48]	@ 0x30
 8005866:	2300      	movs	r3, #0
 8005868:	637b      	str	r3, [r7, #52]	@ 0x34
 800586a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800586e:	460b      	mov	r3, r1
 8005870:	4313      	orrs	r3, r2
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005874:	4b6b      	ldr	r3, [pc, #428]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005878:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005884:	4a67      	ldr	r2, [pc, #412]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	2100      	movs	r1, #0
 8005894:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800589c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058a0:	460b      	mov	r3, r1
 80058a2:	4313      	orrs	r3, r2
 80058a4:	d011      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	3308      	adds	r3, #8
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fb78 	bl	8005fa4 <RCCEx_PLL2_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	2100      	movs	r1, #0
 80058d4:	6239      	str	r1, [r7, #32]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
 80058dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058e0:	460b      	mov	r3, r1
 80058e2:	4313      	orrs	r3, r2
 80058e4:	d011      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ea:	3308      	adds	r3, #8
 80058ec:	2101      	movs	r1, #1
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fb58 	bl	8005fa4 <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	2100      	movs	r1, #0
 8005914:	61b9      	str	r1, [r7, #24]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d011      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	3308      	adds	r3, #8
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fb38 	bl	8005fa4 <RCCEx_PLL2_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800593a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	2100      	movs	r1, #0
 8005954:	6139      	str	r1, [r7, #16]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005960:	460b      	mov	r3, r1
 8005962:	4313      	orrs	r3, r2
 8005964:	d011      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596a:	3328      	adds	r3, #40	@ 0x28
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fbca 	bl	8006108 <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800597a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	2100      	movs	r1, #0
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059a0:	460b      	mov	r3, r1
 80059a2:	4313      	orrs	r3, r2
 80059a4:	d011      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059aa:	3328      	adds	r3, #40	@ 0x28
 80059ac:	2101      	movs	r1, #1
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fbaa 	bl	8006108 <RCCEx_PLL3_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	2100      	movs	r1, #0
 80059d4:	6039      	str	r1, [r7, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d011      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	3328      	adds	r3, #40	@ 0x28
 80059ec:	2102      	movs	r1, #2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fb8a 	bl	8006108 <RCCEx_PLL3_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005a0a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a24:	58024400 	.word	0x58024400

08005a28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a2c:	f7fe fd96 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8005a30:	4602      	mov	r2, r0
 8005a32:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	4904      	ldr	r1, [pc, #16]	@ (8005a50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a3e:	5ccb      	ldrb	r3, [r1, r3]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	08007954 	.word	0x08007954

08005a54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	@ 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a5c:	4ba1      	ldr	r3, [pc, #644]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a66:	4b9f      	ldr	r3, [pc, #636]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	0b1b      	lsrs	r3, r3, #12
 8005a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a72:	4b9c      	ldr	r3, [pc, #624]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a7e:	4b99      	ldr	r3, [pc, #612]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a82:	08db      	lsrs	r3, r3, #3
 8005a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8111 	beq.w	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	f000 8083 	beq.w	8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	f200 80a1 	bhi.w	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d056      	beq.n	8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005abe:	e099      	b.n	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ac0:	4b88      	ldr	r3, [pc, #544]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d02d      	beq.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005acc:	4b85      	ldr	r3, [pc, #532]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	08db      	lsrs	r3, r3, #3
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	4a84      	ldr	r2, [pc, #528]	@ (8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8005adc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b26:	e087      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b6a:	e065      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b59      	ldr	r3, [pc, #356]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bae:	e043      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b48      	ldr	r3, [pc, #288]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bf2:	e021      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b37      	ldr	r3, [pc, #220]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3c:	0a5b      	lsrs	r3, r3, #9
 8005c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5e:	ee17 2a90 	vmov	r2, s15
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c66:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c8c:	ee17 2a90 	vmov	r2, s15
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c94:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	0e1b      	lsrs	r3, r3, #24
 8005c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cba:	ee17 2a90 	vmov	r2, s15
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	609a      	str	r2, [r3, #8]
}
 8005cd6:	bf00      	nop
 8005cd8:	3724      	adds	r7, #36	@ 0x24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	03d09000 	.word	0x03d09000
 8005cec:	46000000 	.word	0x46000000
 8005cf0:	4c742400 	.word	0x4c742400
 8005cf4:	4a742400 	.word	0x4a742400
 8005cf8:	4af42400 	.word	0x4af42400

08005cfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	@ 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d04:	4ba1      	ldr	r3, [pc, #644]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d0e:	4b9f      	ldr	r3, [pc, #636]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d12:	0d1b      	lsrs	r3, r3, #20
 8005d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d1a:	4b9c      	ldr	r3, [pc, #624]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	0a1b      	lsrs	r3, r3, #8
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d26:	4b99      	ldr	r3, [pc, #612]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	08db      	lsrs	r3, r3, #3
 8005d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8111 	beq.w	8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	f000 8083 	beq.w	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	f200 80a1 	bhi.w	8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d056      	beq.n	8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d66:	e099      	b.n	8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d68:	4b88      	ldr	r3, [pc, #544]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02d      	beq.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d74:	4b85      	ldr	r3, [pc, #532]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	08db      	lsrs	r3, r3, #3
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	4a84      	ldr	r2, [pc, #528]	@ (8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b7b      	ldr	r3, [pc, #492]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005dce:	e087      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e12:	e065      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e26:	4b59      	ldr	r3, [pc, #356]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e56:	e043      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6a:	4b48      	ldr	r3, [pc, #288]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e9a:	e021      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	4b37      	ldr	r3, [pc, #220]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ede:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	0a5b      	lsrs	r3, r3, #9
 8005ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f06:	ee17 2a90 	vmov	r2, s15
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	0c1b      	lsrs	r3, r3, #16
 8005f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f34:	ee17 2a90 	vmov	r2, s15
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f3c:	4b13      	ldr	r3, [pc, #76]	@ (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f40:	0e1b      	lsrs	r3, r3, #24
 8005f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f62:	ee17 2a90 	vmov	r2, s15
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f6a:	e008      	b.n	8005f7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
}
 8005f7e:	bf00      	nop
 8005f80:	3724      	adds	r7, #36	@ 0x24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	03d09000 	.word	0x03d09000
 8005f94:	46000000 	.word	0x46000000
 8005f98:	4c742400 	.word	0x4c742400
 8005f9c:	4a742400 	.word	0x4a742400
 8005fa0:	4af42400 	.word	0x4af42400

08005fa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fb2:	4b53      	ldr	r3, [pc, #332]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d101      	bne.n	8005fc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e099      	b.n	80060f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a4e      	ldr	r2, [pc, #312]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fce:	f7fb fc6f 	bl	80018b0 <HAL_GetTick>
 8005fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fd6:	f7fb fc6b 	bl	80018b0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e086      	b.n	80060f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fe8:	4b45      	ldr	r3, [pc, #276]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ff4:	4b42      	ldr	r3, [pc, #264]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	031b      	lsls	r3, r3, #12
 8006002:	493f      	ldr	r1, [pc, #252]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006004:	4313      	orrs	r3, r2
 8006006:	628b      	str	r3, [r1, #40]	@ 0x28
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	3b01      	subs	r3, #1
 800600e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	3b01      	subs	r3, #1
 8006018:	025b      	lsls	r3, r3, #9
 800601a:	b29b      	uxth	r3, r3
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	3b01      	subs	r3, #1
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	3b01      	subs	r3, #1
 8006032:	061b      	lsls	r3, r3, #24
 8006034:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006038:	4931      	ldr	r1, [pc, #196]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 800603a:	4313      	orrs	r3, r2
 800603c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800603e:	4b30      	ldr	r3, [pc, #192]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	492d      	ldr	r1, [pc, #180]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 800604c:	4313      	orrs	r3, r2
 800604e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006050:	4b2b      	ldr	r3, [pc, #172]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	f023 0220 	bic.w	r2, r3, #32
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	4928      	ldr	r1, [pc, #160]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 800605e:	4313      	orrs	r3, r2
 8006060:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006062:	4b27      	ldr	r3, [pc, #156]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	4a26      	ldr	r2, [pc, #152]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800606e:	4b24      	ldr	r3, [pc, #144]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006072:	4b24      	ldr	r3, [pc, #144]	@ (8006104 <RCCEx_PLL2_Config+0x160>)
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	69d2      	ldr	r2, [r2, #28]
 800607a:	00d2      	lsls	r2, r2, #3
 800607c:	4920      	ldr	r1, [pc, #128]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 800607e:	4313      	orrs	r3, r2
 8006080:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006082:	4b1f      	ldr	r3, [pc, #124]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	4a1e      	ldr	r2, [pc, #120]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006088:	f043 0310 	orr.w	r3, r3, #16
 800608c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006094:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	4a19      	ldr	r2, [pc, #100]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 800609a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800609e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060a0:	e00f      	b.n	80060c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d106      	bne.n	80060b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060a8:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	4a14      	ldr	r2, [pc, #80]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060b4:	e005      	b.n	80060c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060b6:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	4a11      	ldr	r2, [pc, #68]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ce:	f7fb fbef 	bl	80018b0 <HAL_GetTick>
 80060d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060d4:	e008      	b.n	80060e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060d6:	f7fb fbeb 	bl	80018b0 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e006      	b.n	80060f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060e8:	4b05      	ldr	r3, [pc, #20]	@ (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	58024400 	.word	0x58024400
 8006104:	ffff0007 	.word	0xffff0007

08006108 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006116:	4b53      	ldr	r3, [pc, #332]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d101      	bne.n	8006126 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e099      	b.n	800625a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006126:	4b4f      	ldr	r3, [pc, #316]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a4e      	ldr	r2, [pc, #312]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800612c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006132:	f7fb fbbd 	bl	80018b0 <HAL_GetTick>
 8006136:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006138:	e008      	b.n	800614c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800613a:	f7fb fbb9 	bl	80018b0 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e086      	b.n	800625a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800614c:	4b45      	ldr	r3, [pc, #276]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f0      	bne.n	800613a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006158:	4b42      	ldr	r3, [pc, #264]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	051b      	lsls	r3, r3, #20
 8006166:	493f      	ldr	r1, [pc, #252]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006168:	4313      	orrs	r3, r2
 800616a:	628b      	str	r3, [r1, #40]	@ 0x28
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	3b01      	subs	r3, #1
 8006172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	3b01      	subs	r3, #1
 800617c:	025b      	lsls	r3, r3, #9
 800617e:	b29b      	uxth	r3, r3
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	3b01      	subs	r3, #1
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	3b01      	subs	r3, #1
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800619c:	4931      	ldr	r1, [pc, #196]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061a2:	4b30      	ldr	r3, [pc, #192]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	492d      	ldr	r1, [pc, #180]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	4928      	ldr	r1, [pc, #160]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061c6:	4b27      	ldr	r3, [pc, #156]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	4a26      	ldr	r2, [pc, #152]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061d2:	4b24      	ldr	r3, [pc, #144]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061d6:	4b24      	ldr	r3, [pc, #144]	@ (8006268 <RCCEx_PLL3_Config+0x160>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	69d2      	ldr	r2, [r2, #28]
 80061de:	00d2      	lsls	r2, r2, #3
 80061e0:	4920      	ldr	r1, [pc, #128]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80061e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80061f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fc:	4a19      	ldr	r2, [pc, #100]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006204:	e00f      	b.n	8006226 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d106      	bne.n	800621a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800620c:	4b15      	ldr	r3, [pc, #84]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	4a14      	ldr	r2, [pc, #80]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006212:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006216:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006218:	e005      	b.n	8006226 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800621a:	4b12      	ldr	r3, [pc, #72]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	4a11      	ldr	r2, [pc, #68]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006220:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006224:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006226:	4b0f      	ldr	r3, [pc, #60]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a0e      	ldr	r2, [pc, #56]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006232:	f7fb fb3d 	bl	80018b0 <HAL_GetTick>
 8006236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006238:	e008      	b.n	800624c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800623a:	f7fb fb39 	bl	80018b0 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e006      	b.n	800625a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800624c:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <RCCEx_PLL3_Config+0x15c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	58024400 	.word	0x58024400
 8006268:	ffff0007 	.word	0xffff0007

0800626c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e10f      	b.n	800649e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a87      	ldr	r2, [pc, #540]	@ (80064a8 <HAL_SPI_Init+0x23c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00f      	beq.n	80062ae <HAL_SPI_Init+0x42>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a86      	ldr	r2, [pc, #536]	@ (80064ac <HAL_SPI_Init+0x240>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00a      	beq.n	80062ae <HAL_SPI_Init+0x42>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a84      	ldr	r2, [pc, #528]	@ (80064b0 <HAL_SPI_Init+0x244>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d005      	beq.n	80062ae <HAL_SPI_Init+0x42>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	d901      	bls.n	80062ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0f7      	b.n	800649e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f900 	bl	80064b4 <SPI_GetPacketSize>
 80062b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a7b      	ldr	r2, [pc, #492]	@ (80064a8 <HAL_SPI_Init+0x23c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00c      	beq.n	80062da <HAL_SPI_Init+0x6e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a79      	ldr	r2, [pc, #484]	@ (80064ac <HAL_SPI_Init+0x240>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d007      	beq.n	80062da <HAL_SPI_Init+0x6e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a78      	ldr	r2, [pc, #480]	@ (80064b0 <HAL_SPI_Init+0x244>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d002      	beq.n	80062da <HAL_SPI_Init+0x6e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d811      	bhi.n	80062fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062de:	4a72      	ldr	r2, [pc, #456]	@ (80064a8 <HAL_SPI_Init+0x23c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a70      	ldr	r2, [pc, #448]	@ (80064ac <HAL_SPI_Init+0x240>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_SPI_Init+0x8c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a6f      	ldr	r2, [pc, #444]	@ (80064b0 <HAL_SPI_Init+0x244>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d104      	bne.n	8006302 <HAL_SPI_Init+0x96>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d901      	bls.n	8006302 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e0cd      	b.n	800649e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fa ffe0 	bl	80012dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800633e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006348:	d119      	bne.n	800637e <HAL_SPI_Init+0x112>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006352:	d103      	bne.n	800635c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10c      	bne.n	800637e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800636c:	d107      	bne.n	800637e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800637c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00f      	beq.n	80063aa <HAL_SPI_Init+0x13e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d90b      	bls.n	80063aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e007      	b.n	80063ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69da      	ldr	r2, [r3, #28]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	ea42 0103 	orr.w	r1, r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641a:	ea42 0103 	orr.w	r1, r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d113      	bne.n	800645a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006444:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006458:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0201 	bic.w	r2, r2, #1
 8006468:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40013000 	.word	0x40013000
 80064ac:	40003800 	.word	0x40003800
 80064b0:	40003c00 	.word	0x40003c00

080064b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	3301      	adds	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	3301      	adds	r3, #1
 80064cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	3307      	adds	r3, #7
 80064d2:	08db      	lsrs	r3, r3, #3
 80064d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	fb02 f303 	mul.w	r3, r2, r3
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e042      	b.n	8006582 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fa ff64 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2224      	movs	r2, #36	@ 0x24
 8006518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd91 	bl	800705c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f826 	bl	800658c <UART_SetConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e01b      	b.n	8006582 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006558:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006568:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0201 	orr.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fe10 	bl	80071a0 <UART_CheckIdleState>
 8006580:	4603      	mov	r3, r0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800658c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006590:	b092      	sub	sp, #72	@ 0x48
 8006592:	af00      	add	r7, sp, #0
 8006594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4bbe      	ldr	r3, [pc, #760]	@ (80068b4 <UART_SetConfig+0x328>)
 80065bc:	4013      	ands	r3, r2
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4ab3      	ldr	r2, [pc, #716]	@ (80068b8 <UART_SetConfig+0x32c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065f4:	4313      	orrs	r3, r2
 80065f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	4baf      	ldr	r3, [pc, #700]	@ (80068bc <UART_SetConfig+0x330>)
 8006600:	4013      	ands	r3, r2
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006608:	430b      	orrs	r3, r1
 800660a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	f023 010f 	bic.w	r1, r3, #15
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4aa6      	ldr	r2, [pc, #664]	@ (80068c0 <UART_SetConfig+0x334>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d177      	bne.n	800671c <UART_SetConfig+0x190>
 800662c:	4ba5      	ldr	r3, [pc, #660]	@ (80068c4 <UART_SetConfig+0x338>)
 800662e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006630:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006634:	2b28      	cmp	r3, #40	@ 0x28
 8006636:	d86d      	bhi.n	8006714 <UART_SetConfig+0x188>
 8006638:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <UART_SetConfig+0xb4>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	080066e5 	.word	0x080066e5
 8006644:	08006715 	.word	0x08006715
 8006648:	08006715 	.word	0x08006715
 800664c:	08006715 	.word	0x08006715
 8006650:	08006715 	.word	0x08006715
 8006654:	08006715 	.word	0x08006715
 8006658:	08006715 	.word	0x08006715
 800665c:	08006715 	.word	0x08006715
 8006660:	080066ed 	.word	0x080066ed
 8006664:	08006715 	.word	0x08006715
 8006668:	08006715 	.word	0x08006715
 800666c:	08006715 	.word	0x08006715
 8006670:	08006715 	.word	0x08006715
 8006674:	08006715 	.word	0x08006715
 8006678:	08006715 	.word	0x08006715
 800667c:	08006715 	.word	0x08006715
 8006680:	080066f5 	.word	0x080066f5
 8006684:	08006715 	.word	0x08006715
 8006688:	08006715 	.word	0x08006715
 800668c:	08006715 	.word	0x08006715
 8006690:	08006715 	.word	0x08006715
 8006694:	08006715 	.word	0x08006715
 8006698:	08006715 	.word	0x08006715
 800669c:	08006715 	.word	0x08006715
 80066a0:	080066fd 	.word	0x080066fd
 80066a4:	08006715 	.word	0x08006715
 80066a8:	08006715 	.word	0x08006715
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006715 	.word	0x08006715
 80066b4:	08006715 	.word	0x08006715
 80066b8:	08006715 	.word	0x08006715
 80066bc:	08006715 	.word	0x08006715
 80066c0:	08006705 	.word	0x08006705
 80066c4:	08006715 	.word	0x08006715
 80066c8:	08006715 	.word	0x08006715
 80066cc:	08006715 	.word	0x08006715
 80066d0:	08006715 	.word	0x08006715
 80066d4:	08006715 	.word	0x08006715
 80066d8:	08006715 	.word	0x08006715
 80066dc:	08006715 	.word	0x08006715
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e222      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80066ec:	2304      	movs	r3, #4
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e21e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80066f4:	2308      	movs	r3, #8
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e21a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80066fc:	2310      	movs	r3, #16
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006702:	e216      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006704:	2320      	movs	r3, #32
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e212      	b.n	8006b32 <UART_SetConfig+0x5a6>
 800670c:	2340      	movs	r3, #64	@ 0x40
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006712:	e20e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006714:	2380      	movs	r3, #128	@ 0x80
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671a:	e20a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a69      	ldr	r2, [pc, #420]	@ (80068c8 <UART_SetConfig+0x33c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d130      	bne.n	8006788 <UART_SetConfig+0x1fc>
 8006726:	4b67      	ldr	r3, [pc, #412]	@ (80068c4 <UART_SetConfig+0x338>)
 8006728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	2b05      	cmp	r3, #5
 8006730:	d826      	bhi.n	8006780 <UART_SetConfig+0x1f4>
 8006732:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <UART_SetConfig+0x1ac>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	08006751 	.word	0x08006751
 800673c:	08006759 	.word	0x08006759
 8006740:	08006761 	.word	0x08006761
 8006744:	08006769 	.word	0x08006769
 8006748:	08006771 	.word	0x08006771
 800674c:	08006779 	.word	0x08006779
 8006750:	2300      	movs	r3, #0
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e1ec      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e1e8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e1e4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676e:	e1e0      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006770:	2320      	movs	r3, #32
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e1dc      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006778:	2340      	movs	r3, #64	@ 0x40
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e1d8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006786:	e1d4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a4f      	ldr	r2, [pc, #316]	@ (80068cc <UART_SetConfig+0x340>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d130      	bne.n	80067f4 <UART_SetConfig+0x268>
 8006792:	4b4c      	ldr	r3, [pc, #304]	@ (80068c4 <UART_SetConfig+0x338>)
 8006794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b05      	cmp	r3, #5
 800679c:	d826      	bhi.n	80067ec <UART_SetConfig+0x260>
 800679e:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <UART_SetConfig+0x218>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067bd 	.word	0x080067bd
 80067a8:	080067c5 	.word	0x080067c5
 80067ac:	080067cd 	.word	0x080067cd
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e1b6      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e1b2      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d2:	e1ae      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067da:	e1aa      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067dc:	2320      	movs	r3, #32
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e2:	e1a6      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067e4:	2340      	movs	r3, #64	@ 0x40
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ea:	e1a2      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067ec:	2380      	movs	r3, #128	@ 0x80
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f2:	e19e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a35      	ldr	r2, [pc, #212]	@ (80068d0 <UART_SetConfig+0x344>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d130      	bne.n	8006860 <UART_SetConfig+0x2d4>
 80067fe:	4b31      	ldr	r3, [pc, #196]	@ (80068c4 <UART_SetConfig+0x338>)
 8006800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b05      	cmp	r3, #5
 8006808:	d826      	bhi.n	8006858 <UART_SetConfig+0x2cc>
 800680a:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <UART_SetConfig+0x284>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006829 	.word	0x08006829
 8006814:	08006831 	.word	0x08006831
 8006818:	08006839 	.word	0x08006839
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e180      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e17c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683e:	e178      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006846:	e174      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006848:	2320      	movs	r3, #32
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e170      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006850:	2340      	movs	r3, #64	@ 0x40
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e16c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006858:	2380      	movs	r3, #128	@ 0x80
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e168      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1b      	ldr	r2, [pc, #108]	@ (80068d4 <UART_SetConfig+0x348>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d142      	bne.n	80068f0 <UART_SetConfig+0x364>
 800686a:	4b16      	ldr	r3, [pc, #88]	@ (80068c4 <UART_SetConfig+0x338>)
 800686c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b05      	cmp	r3, #5
 8006874:	d838      	bhi.n	80068e8 <UART_SetConfig+0x35c>
 8006876:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <UART_SetConfig+0x2f0>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006895 	.word	0x08006895
 8006880:	0800689d 	.word	0x0800689d
 8006884:	080068a5 	.word	0x080068a5
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068d9 	.word	0x080068d9
 8006890:	080068e1 	.word	0x080068e1
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689a:	e14a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a2:	e146      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068aa:	e142      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b2:	e13e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068b4:	cfff69f3 	.word	0xcfff69f3
 80068b8:	58000c00 	.word	0x58000c00
 80068bc:	11fff4ff 	.word	0x11fff4ff
 80068c0:	40011000 	.word	0x40011000
 80068c4:	58024400 	.word	0x58024400
 80068c8:	40004400 	.word	0x40004400
 80068cc:	40004800 	.word	0x40004800
 80068d0:	40004c00 	.word	0x40004c00
 80068d4:	40005000 	.word	0x40005000
 80068d8:	2320      	movs	r3, #32
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e128      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068e0:	2340      	movs	r3, #64	@ 0x40
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e124      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068e8:	2380      	movs	r3, #128	@ 0x80
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ee:	e120      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4acb      	ldr	r2, [pc, #812]	@ (8006c24 <UART_SetConfig+0x698>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d176      	bne.n	80069e8 <UART_SetConfig+0x45c>
 80068fa:	4bcb      	ldr	r3, [pc, #812]	@ (8006c28 <UART_SetConfig+0x69c>)
 80068fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006902:	2b28      	cmp	r3, #40	@ 0x28
 8006904:	d86c      	bhi.n	80069e0 <UART_SetConfig+0x454>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x380>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	080069b1 	.word	0x080069b1
 8006910:	080069e1 	.word	0x080069e1
 8006914:	080069e1 	.word	0x080069e1
 8006918:	080069e1 	.word	0x080069e1
 800691c:	080069e1 	.word	0x080069e1
 8006920:	080069e1 	.word	0x080069e1
 8006924:	080069e1 	.word	0x080069e1
 8006928:	080069e1 	.word	0x080069e1
 800692c:	080069b9 	.word	0x080069b9
 8006930:	080069e1 	.word	0x080069e1
 8006934:	080069e1 	.word	0x080069e1
 8006938:	080069e1 	.word	0x080069e1
 800693c:	080069e1 	.word	0x080069e1
 8006940:	080069e1 	.word	0x080069e1
 8006944:	080069e1 	.word	0x080069e1
 8006948:	080069e1 	.word	0x080069e1
 800694c:	080069c1 	.word	0x080069c1
 8006950:	080069e1 	.word	0x080069e1
 8006954:	080069e1 	.word	0x080069e1
 8006958:	080069e1 	.word	0x080069e1
 800695c:	080069e1 	.word	0x080069e1
 8006960:	080069e1 	.word	0x080069e1
 8006964:	080069e1 	.word	0x080069e1
 8006968:	080069e1 	.word	0x080069e1
 800696c:	080069c9 	.word	0x080069c9
 8006970:	080069e1 	.word	0x080069e1
 8006974:	080069e1 	.word	0x080069e1
 8006978:	080069e1 	.word	0x080069e1
 800697c:	080069e1 	.word	0x080069e1
 8006980:	080069e1 	.word	0x080069e1
 8006984:	080069e1 	.word	0x080069e1
 8006988:	080069e1 	.word	0x080069e1
 800698c:	080069d1 	.word	0x080069d1
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069e1 	.word	0x080069e1
 800699c:	080069e1 	.word	0x080069e1
 80069a0:	080069e1 	.word	0x080069e1
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e0bc      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e0b8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069c0:	2308      	movs	r3, #8
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e0b4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069c8:	2310      	movs	r3, #16
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ce:	e0b0      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069d0:	2320      	movs	r3, #32
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d6:	e0ac      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069d8:	2340      	movs	r3, #64	@ 0x40
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069de:	e0a8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069e0:	2380      	movs	r3, #128	@ 0x80
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e0a4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a8f      	ldr	r2, [pc, #572]	@ (8006c2c <UART_SetConfig+0x6a0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d130      	bne.n	8006a54 <UART_SetConfig+0x4c8>
 80069f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006c28 <UART_SetConfig+0x69c>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d826      	bhi.n	8006a4c <UART_SetConfig+0x4c0>
 80069fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <UART_SetConfig+0x478>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a1d 	.word	0x08006a1d
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a3d 	.word	0x08006a3d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e086      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e082      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e07e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e07a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e076      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a44:	2340      	movs	r3, #64	@ 0x40
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	e072      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a4c:	2380      	movs	r3, #128	@ 0x80
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e06e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a75      	ldr	r2, [pc, #468]	@ (8006c30 <UART_SetConfig+0x6a4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d130      	bne.n	8006ac0 <UART_SetConfig+0x534>
 8006a5e:	4b72      	ldr	r3, [pc, #456]	@ (8006c28 <UART_SetConfig+0x69c>)
 8006a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d826      	bhi.n	8006ab8 <UART_SetConfig+0x52c>
 8006a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <UART_SetConfig+0x4e4>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a89 	.word	0x08006a89
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	08006a99 	.word	0x08006a99
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e050      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e04c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e048      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	e044      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aae:	e040      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006ab0:	2340      	movs	r3, #64	@ 0x40
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab6:	e03c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006ab8:	2380      	movs	r3, #128	@ 0x80
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e038      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a5b      	ldr	r2, [pc, #364]	@ (8006c34 <UART_SetConfig+0x6a8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d130      	bne.n	8006b2c <UART_SetConfig+0x5a0>
 8006aca:	4b57      	ldr	r3, [pc, #348]	@ (8006c28 <UART_SetConfig+0x69c>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d826      	bhi.n	8006b24 <UART_SetConfig+0x598>
 8006ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8006adc <UART_SetConfig+0x550>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006af5 	.word	0x08006af5
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	08006b05 	.word	0x08006b05
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e01a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b02:	e016      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0a:	e012      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b12:	e00e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b14:	2320      	movs	r3, #32
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1a:	e00a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b1c:	2340      	movs	r3, #64	@ 0x40
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b22:	e006      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b24:	2380      	movs	r3, #128	@ 0x80
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2a:	e002      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b2c:	2380      	movs	r3, #128	@ 0x80
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a3f      	ldr	r2, [pc, #252]	@ (8006c34 <UART_SetConfig+0x6a8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	f040 80f8 	bne.w	8006d2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	dc46      	bgt.n	8006bd4 <UART_SetConfig+0x648>
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	f2c0 8082 	blt.w	8006c50 <UART_SetConfig+0x6c4>
 8006b4c:	3b02      	subs	r3, #2
 8006b4e:	2b1e      	cmp	r3, #30
 8006b50:	d87e      	bhi.n	8006c50 <UART_SetConfig+0x6c4>
 8006b52:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <UART_SetConfig+0x5cc>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006bdb 	.word	0x08006bdb
 8006b5c:	08006c51 	.word	0x08006c51
 8006b60:	08006be3 	.word	0x08006be3
 8006b64:	08006c51 	.word	0x08006c51
 8006b68:	08006c51 	.word	0x08006c51
 8006b6c:	08006c51 	.word	0x08006c51
 8006b70:	08006bf3 	.word	0x08006bf3
 8006b74:	08006c51 	.word	0x08006c51
 8006b78:	08006c51 	.word	0x08006c51
 8006b7c:	08006c51 	.word	0x08006c51
 8006b80:	08006c51 	.word	0x08006c51
 8006b84:	08006c51 	.word	0x08006c51
 8006b88:	08006c51 	.word	0x08006c51
 8006b8c:	08006c51 	.word	0x08006c51
 8006b90:	08006c03 	.word	0x08006c03
 8006b94:	08006c51 	.word	0x08006c51
 8006b98:	08006c51 	.word	0x08006c51
 8006b9c:	08006c51 	.word	0x08006c51
 8006ba0:	08006c51 	.word	0x08006c51
 8006ba4:	08006c51 	.word	0x08006c51
 8006ba8:	08006c51 	.word	0x08006c51
 8006bac:	08006c51 	.word	0x08006c51
 8006bb0:	08006c51 	.word	0x08006c51
 8006bb4:	08006c51 	.word	0x08006c51
 8006bb8:	08006c51 	.word	0x08006c51
 8006bbc:	08006c51 	.word	0x08006c51
 8006bc0:	08006c51 	.word	0x08006c51
 8006bc4:	08006c51 	.word	0x08006c51
 8006bc8:	08006c51 	.word	0x08006c51
 8006bcc:	08006c51 	.word	0x08006c51
 8006bd0:	08006c43 	.word	0x08006c43
 8006bd4:	2b40      	cmp	r3, #64	@ 0x40
 8006bd6:	d037      	beq.n	8006c48 <UART_SetConfig+0x6bc>
 8006bd8:	e03a      	b.n	8006c50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006bda:	f7fe ff25 	bl	8005a28 <HAL_RCCEx_GetD3PCLK1Freq>
 8006bde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006be0:	e03c      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe ff34 	bl	8005a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf0:	e034      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf2:	f107 0318 	add.w	r3, r7, #24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff f880 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c00:	e02c      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c02:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <UART_SetConfig+0x69c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c0e:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <UART_SetConfig+0x69c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	4a07      	ldr	r2, [pc, #28]	@ (8006c38 <UART_SetConfig+0x6ac>)
 8006c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c20:	e01c      	b.n	8006c5c <UART_SetConfig+0x6d0>
 8006c22:	bf00      	nop
 8006c24:	40011400 	.word	0x40011400
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	40007800 	.word	0x40007800
 8006c30:	40007c00 	.word	0x40007c00
 8006c34:	58000c00 	.word	0x58000c00
 8006c38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8006eb4 <UART_SetConfig+0x928>)
 8006c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c40:	e00c      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c42:	4b9d      	ldr	r3, [pc, #628]	@ (8006eb8 <UART_SetConfig+0x92c>)
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c46:	e009      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4e:	e005      	b.n	8006c5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 81de 	beq.w	8007020 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	4a94      	ldr	r2, [pc, #592]	@ (8006ebc <UART_SetConfig+0x930>)
 8006c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d305      	bcc.n	8006c94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d903      	bls.n	8006c9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c9a:	e1c1      	b.n	8007020 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
 8006ca2:	60fa      	str	r2, [r7, #12]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca8:	4a84      	ldr	r2, [pc, #528]	@ (8006ebc <UART_SetConfig+0x930>)
 8006caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cbe:	f7f9 fb0b 	bl	80002d8 <__aeabi_uldivmod>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	020b      	lsls	r3, r1, #8
 8006cd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cd8:	0202      	lsls	r2, r0, #8
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	6849      	ldr	r1, [r1, #4]
 8006cde:	0849      	lsrs	r1, r1, #1
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	eb12 0804 	adds.w	r8, r2, r4
 8006cea:	eb43 0905 	adc.w	r9, r3, r5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	469a      	mov	sl, r3
 8006cf6:	4693      	mov	fp, r2
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4649      	mov	r1, r9
 8006d00:	f7f9 faea 	bl	80002d8 <__aeabi_uldivmod>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4613      	mov	r3, r2
 8006d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d12:	d308      	bcc.n	8006d26 <UART_SetConfig+0x79a>
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d1a:	d204      	bcs.n	8006d26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d22:	60da      	str	r2, [r3, #12]
 8006d24:	e17c      	b.n	8007020 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d2c:	e178      	b.n	8007020 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d36:	f040 80c5 	bne.w	8006ec4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006d3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	dc48      	bgt.n	8006dd4 <UART_SetConfig+0x848>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	db7b      	blt.n	8006e3e <UART_SetConfig+0x8b2>
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d879      	bhi.n	8006e3e <UART_SetConfig+0x8b2>
 8006d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <UART_SetConfig+0x7c4>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006ddb 	.word	0x08006ddb
 8006d54:	08006de3 	.word	0x08006de3
 8006d58:	08006e3f 	.word	0x08006e3f
 8006d5c:	08006e3f 	.word	0x08006e3f
 8006d60:	08006deb 	.word	0x08006deb
 8006d64:	08006e3f 	.word	0x08006e3f
 8006d68:	08006e3f 	.word	0x08006e3f
 8006d6c:	08006e3f 	.word	0x08006e3f
 8006d70:	08006dfb 	.word	0x08006dfb
 8006d74:	08006e3f 	.word	0x08006e3f
 8006d78:	08006e3f 	.word	0x08006e3f
 8006d7c:	08006e3f 	.word	0x08006e3f
 8006d80:	08006e3f 	.word	0x08006e3f
 8006d84:	08006e3f 	.word	0x08006e3f
 8006d88:	08006e3f 	.word	0x08006e3f
 8006d8c:	08006e3f 	.word	0x08006e3f
 8006d90:	08006e0b 	.word	0x08006e0b
 8006d94:	08006e3f 	.word	0x08006e3f
 8006d98:	08006e3f 	.word	0x08006e3f
 8006d9c:	08006e3f 	.word	0x08006e3f
 8006da0:	08006e3f 	.word	0x08006e3f
 8006da4:	08006e3f 	.word	0x08006e3f
 8006da8:	08006e3f 	.word	0x08006e3f
 8006dac:	08006e3f 	.word	0x08006e3f
 8006db0:	08006e3f 	.word	0x08006e3f
 8006db4:	08006e3f 	.word	0x08006e3f
 8006db8:	08006e3f 	.word	0x08006e3f
 8006dbc:	08006e3f 	.word	0x08006e3f
 8006dc0:	08006e3f 	.word	0x08006e3f
 8006dc4:	08006e3f 	.word	0x08006e3f
 8006dc8:	08006e3f 	.word	0x08006e3f
 8006dcc:	08006e3f 	.word	0x08006e3f
 8006dd0:	08006e31 	.word	0x08006e31
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d02e      	beq.n	8006e36 <UART_SetConfig+0x8aa>
 8006dd8:	e031      	b.n	8006e3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dda:	f7fd fbef 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8006dde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006de0:	e033      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de2:	f7fd fc01 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8006de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006de8:	e02f      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fe30 	bl	8005a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006df8:	e027      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfa:	f107 0318 	add.w	r3, r7, #24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe ff7c 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e08:	e01f      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec0 <UART_SetConfig+0x934>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e16:	4b2a      	ldr	r3, [pc, #168]	@ (8006ec0 <UART_SetConfig+0x934>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	4a24      	ldr	r2, [pc, #144]	@ (8006eb4 <UART_SetConfig+0x928>)
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e28:	e00f      	b.n	8006e4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e2a:	4b22      	ldr	r3, [pc, #136]	@ (8006eb4 <UART_SetConfig+0x928>)
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e2e:	e00c      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e30:	4b21      	ldr	r3, [pc, #132]	@ (8006eb8 <UART_SetConfig+0x92c>)
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e34:	e009      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3c:	e005      	b.n	8006e4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80e7 	beq.w	8007020 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	4a19      	ldr	r2, [pc, #100]	@ (8006ebc <UART_SetConfig+0x930>)
 8006e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e64:	005a      	lsls	r2, r3, #1
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	441a      	add	r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d916      	bls.n	8006eac <UART_SetConfig+0x920>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e84:	d212      	bcs.n	8006eac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f023 030f 	bic.w	r3, r3, #15
 8006e8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006ea8:	60da      	str	r2, [r3, #12]
 8006eaa:	e0b9      	b.n	8007020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006eb2:	e0b5      	b.n	8007020 <UART_SetConfig+0xa94>
 8006eb4:	03d09000 	.word	0x03d09000
 8006eb8:	003d0900 	.word	0x003d0900
 8006ebc:	08007964 	.word	0x08007964
 8006ec0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ec4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	dc49      	bgt.n	8006f60 <UART_SetConfig+0x9d4>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	db7c      	blt.n	8006fca <UART_SetConfig+0xa3e>
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d87a      	bhi.n	8006fca <UART_SetConfig+0xa3e>
 8006ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <UART_SetConfig+0x950>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006f67 	.word	0x08006f67
 8006ee0:	08006f6f 	.word	0x08006f6f
 8006ee4:	08006fcb 	.word	0x08006fcb
 8006ee8:	08006fcb 	.word	0x08006fcb
 8006eec:	08006f77 	.word	0x08006f77
 8006ef0:	08006fcb 	.word	0x08006fcb
 8006ef4:	08006fcb 	.word	0x08006fcb
 8006ef8:	08006fcb 	.word	0x08006fcb
 8006efc:	08006f87 	.word	0x08006f87
 8006f00:	08006fcb 	.word	0x08006fcb
 8006f04:	08006fcb 	.word	0x08006fcb
 8006f08:	08006fcb 	.word	0x08006fcb
 8006f0c:	08006fcb 	.word	0x08006fcb
 8006f10:	08006fcb 	.word	0x08006fcb
 8006f14:	08006fcb 	.word	0x08006fcb
 8006f18:	08006fcb 	.word	0x08006fcb
 8006f1c:	08006f97 	.word	0x08006f97
 8006f20:	08006fcb 	.word	0x08006fcb
 8006f24:	08006fcb 	.word	0x08006fcb
 8006f28:	08006fcb 	.word	0x08006fcb
 8006f2c:	08006fcb 	.word	0x08006fcb
 8006f30:	08006fcb 	.word	0x08006fcb
 8006f34:	08006fcb 	.word	0x08006fcb
 8006f38:	08006fcb 	.word	0x08006fcb
 8006f3c:	08006fcb 	.word	0x08006fcb
 8006f40:	08006fcb 	.word	0x08006fcb
 8006f44:	08006fcb 	.word	0x08006fcb
 8006f48:	08006fcb 	.word	0x08006fcb
 8006f4c:	08006fcb 	.word	0x08006fcb
 8006f50:	08006fcb 	.word	0x08006fcb
 8006f54:	08006fcb 	.word	0x08006fcb
 8006f58:	08006fcb 	.word	0x08006fcb
 8006f5c:	08006fbd 	.word	0x08006fbd
 8006f60:	2b40      	cmp	r3, #64	@ 0x40
 8006f62:	d02e      	beq.n	8006fc2 <UART_SetConfig+0xa36>
 8006f64:	e031      	b.n	8006fca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7fd fb29 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8006f6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f6c:	e033      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6e:	f7fd fb3b 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8006f72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f74:	e02f      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fd6a 	bl	8005a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f84:	e027      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f86:	f107 0318 	add.w	r3, r7, #24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe feb6 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f94:	e01f      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f96:	4b2d      	ldr	r3, [pc, #180]	@ (800704c <UART_SetConfig+0xac0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800704c <UART_SetConfig+0xac0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	08db      	lsrs	r3, r3, #3
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	4a28      	ldr	r2, [pc, #160]	@ (8007050 <UART_SetConfig+0xac4>)
 8006fae:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fb4:	e00f      	b.n	8006fd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006fb6:	4b26      	ldr	r3, [pc, #152]	@ (8007050 <UART_SetConfig+0xac4>)
 8006fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fba:	e00c      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fbc:	4b25      	ldr	r3, [pc, #148]	@ (8007054 <UART_SetConfig+0xac8>)
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc0:	e009      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc8:	e005      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006fd4:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d021      	beq.n	8007020 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8007058 <UART_SetConfig+0xacc>)
 8006fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fea:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	441a      	add	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d909      	bls.n	800701a <UART_SetConfig+0xa8e>
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800700c:	d205      	bcs.n	800701a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	b29a      	uxth	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60da      	str	r2, [r3, #12]
 8007018:	e002      	b.n	8007020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2201      	movs	r2, #1
 8007024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2201      	movs	r2, #1
 800702c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2200      	movs	r2, #0
 8007034:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800703c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007040:	4618      	mov	r0, r3
 8007042:	3748      	adds	r7, #72	@ 0x48
 8007044:	46bd      	mov	sp, r7
 8007046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
 8007050:	03d09000 	.word	0x03d09000
 8007054:	003d0900 	.word	0x003d0900
 8007058:	08007964 	.word	0x08007964

0800705c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01a      	beq.n	8007172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800715a:	d10a      	bne.n	8007172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]
  }
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b098      	sub	sp, #96	@ 0x60
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b0:	f7fa fb7e 	bl	80018b0 <HAL_GetTick>
 80071b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d12f      	bne.n	8007224 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071cc:	2200      	movs	r2, #0
 80071ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f88e 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d022      	beq.n	8007224 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80071fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800720a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e063      	b.n	80072ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b04      	cmp	r3, #4
 8007230:	d149      	bne.n	80072c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007232:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800723a:	2200      	movs	r2, #0
 800723c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f857 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d03c      	beq.n	80072c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	623b      	str	r3, [r7, #32]
   return(result);
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800726a:	633b      	str	r3, [r7, #48]	@ 0x30
 800726c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e6      	bne.n	800724c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	60fb      	str	r3, [r7, #12]
   return(result);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800729e:	61fa      	str	r2, [r7, #28]
 80072a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	69b9      	ldr	r1, [r7, #24]
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	617b      	str	r3, [r7, #20]
   return(result);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e012      	b.n	80072ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3758      	adds	r7, #88	@ 0x58
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007304:	e04f      	b.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d04b      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7fa facf 	bl	80018b0 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <UART_WaitOnFlagUntilTimeout+0x30>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e04e      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d037      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b80      	cmp	r3, #128	@ 0x80
 800733a:	d034      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b40      	cmp	r3, #64	@ 0x40
 8007340:	d031      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d110      	bne.n	8007372 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2208      	movs	r2, #8
 8007356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f839 	bl	80073d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2208      	movs	r2, #8
 8007362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e029      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800737c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007380:	d111      	bne.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800738a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f81f 	bl	80073d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e00f      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	bf0c      	ite	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	2300      	movne	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d0a0      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b095      	sub	sp, #84	@ 0x54
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80073f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e6      	bne.n	80073d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	61fb      	str	r3, [r7, #28]
   return(result);
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <UART_EndRxTransfer+0xc8>)
 800741e:	4013      	ands	r3, r2
 8007420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3308      	adds	r3, #8
 8007428:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800742a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800742c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e5      	bne.n	800740a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007442:	2b01      	cmp	r3, #1
 8007444:	d118      	bne.n	8007478 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	60bb      	str	r3, [r7, #8]
   return(result);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f023 0310 	bic.w	r3, r3, #16
 800745a:	647b      	str	r3, [r7, #68]	@ 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	461a      	mov	r2, r3
 8007462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6979      	ldr	r1, [r7, #20]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	613b      	str	r3, [r7, #16]
   return(result);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e6      	bne.n	8007446 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800748c:	bf00      	nop
 800748e:	3754      	adds	r7, #84	@ 0x54
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	effffffe 	.word	0xeffffffe

0800749c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e027      	b.n	8007502 <HAL_UARTEx_DisableFifoMode+0x66>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2224      	movs	r2, #36	@ 0x24
 80074be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80074e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007522:	2302      	movs	r3, #2
 8007524:	e02d      	b.n	8007582 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2224      	movs	r2, #36	@ 0x24
 8007532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f850 	bl	8007608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800759e:	2302      	movs	r3, #2
 80075a0:	e02d      	b.n	80075fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2224      	movs	r2, #36	@ 0x24
 80075ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f812 	bl	8007608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007628:	e031      	b.n	800768e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800762a:	2310      	movs	r3, #16
 800762c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800762e:	2310      	movs	r3, #16
 8007630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	0e5b      	lsrs	r3, r3, #25
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	0f5b      	lsrs	r3, r3, #29
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	7b3a      	ldrb	r2, [r7, #12]
 8007656:	4911      	ldr	r1, [pc, #68]	@ (800769c <UARTEx_SetNbDataToProcess+0x94>)
 8007658:	5c8a      	ldrb	r2, [r1, r2]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800765e:	7b3a      	ldrb	r2, [r7, #12]
 8007660:	490f      	ldr	r1, [pc, #60]	@ (80076a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007664:	fb93 f3f2 	sdiv	r3, r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	7b7a      	ldrb	r2, [r7, #13]
 8007674:	4909      	ldr	r1, [pc, #36]	@ (800769c <UARTEx_SetNbDataToProcess+0x94>)
 8007676:	5c8a      	ldrb	r2, [r1, r2]
 8007678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800767c:	7b7a      	ldrb	r2, [r7, #13]
 800767e:	4908      	ldr	r1, [pc, #32]	@ (80076a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007682:	fb93 f3f2 	sdiv	r3, r3, r2
 8007686:	b29a      	uxth	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	0800797c 	.word	0x0800797c
 80076a0:	08007984 	.word	0x08007984

080076a4 <malloc>:
 80076a4:	4b02      	ldr	r3, [pc, #8]	@ (80076b0 <malloc+0xc>)
 80076a6:	4601      	mov	r1, r0
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	f000 b82d 	b.w	8007708 <_malloc_r>
 80076ae:	bf00      	nop
 80076b0:	24000024 	.word	0x24000024

080076b4 <free>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	@ (80076c0 <free+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f000 b8f5 	b.w	80078a8 <_free_r>
 80076be:	bf00      	nop
 80076c0:	24000024 	.word	0x24000024

080076c4 <sbrk_aligned>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007704 <sbrk_aligned+0x40>)
 80076c8:	460c      	mov	r4, r1
 80076ca:	6831      	ldr	r1, [r6, #0]
 80076cc:	4605      	mov	r5, r0
 80076ce:	b911      	cbnz	r1, 80076d6 <sbrk_aligned+0x12>
 80076d0:	f000 f8ae 	bl	8007830 <_sbrk_r>
 80076d4:	6030      	str	r0, [r6, #0]
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 f8a9 	bl	8007830 <_sbrk_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d103      	bne.n	80076ea <sbrk_aligned+0x26>
 80076e2:	f04f 34ff 	mov.w	r4, #4294967295
 80076e6:	4620      	mov	r0, r4
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d0f8      	beq.n	80076e6 <sbrk_aligned+0x22>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 f89a 	bl	8007830 <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d1f2      	bne.n	80076e6 <sbrk_aligned+0x22>
 8007700:	e7ef      	b.n	80076e2 <sbrk_aligned+0x1e>
 8007702:	bf00      	nop
 8007704:	24000460 	.word	0x24000460

08007708 <_malloc_r>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	1ccd      	adds	r5, r1, #3
 800770e:	f025 0503 	bic.w	r5, r5, #3
 8007712:	3508      	adds	r5, #8
 8007714:	2d0c      	cmp	r5, #12
 8007716:	bf38      	it	cc
 8007718:	250c      	movcc	r5, #12
 800771a:	2d00      	cmp	r5, #0
 800771c:	4606      	mov	r6, r0
 800771e:	db01      	blt.n	8007724 <_malloc_r+0x1c>
 8007720:	42a9      	cmp	r1, r5
 8007722:	d904      	bls.n	800772e <_malloc_r+0x26>
 8007724:	230c      	movs	r3, #12
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	2000      	movs	r0, #0
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007804 <_malloc_r+0xfc>
 8007732:	f000 f869 	bl	8007808 <__malloc_lock>
 8007736:	f8d8 3000 	ldr.w	r3, [r8]
 800773a:	461c      	mov	r4, r3
 800773c:	bb44      	cbnz	r4, 8007790 <_malloc_r+0x88>
 800773e:	4629      	mov	r1, r5
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff ffbf 	bl	80076c4 <sbrk_aligned>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	4604      	mov	r4, r0
 800774a:	d158      	bne.n	80077fe <_malloc_r+0xf6>
 800774c:	f8d8 4000 	ldr.w	r4, [r8]
 8007750:	4627      	mov	r7, r4
 8007752:	2f00      	cmp	r7, #0
 8007754:	d143      	bne.n	80077de <_malloc_r+0xd6>
 8007756:	2c00      	cmp	r4, #0
 8007758:	d04b      	beq.n	80077f2 <_malloc_r+0xea>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	4639      	mov	r1, r7
 800775e:	4630      	mov	r0, r6
 8007760:	eb04 0903 	add.w	r9, r4, r3
 8007764:	f000 f864 	bl	8007830 <_sbrk_r>
 8007768:	4581      	cmp	r9, r0
 800776a:	d142      	bne.n	80077f2 <_malloc_r+0xea>
 800776c:	6821      	ldr	r1, [r4, #0]
 800776e:	1a6d      	subs	r5, r5, r1
 8007770:	4629      	mov	r1, r5
 8007772:	4630      	mov	r0, r6
 8007774:	f7ff ffa6 	bl	80076c4 <sbrk_aligned>
 8007778:	3001      	adds	r0, #1
 800777a:	d03a      	beq.n	80077f2 <_malloc_r+0xea>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	442b      	add	r3, r5
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	f8d8 3000 	ldr.w	r3, [r8]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	bb62      	cbnz	r2, 80077e4 <_malloc_r+0xdc>
 800778a:	f8c8 7000 	str.w	r7, [r8]
 800778e:	e00f      	b.n	80077b0 <_malloc_r+0xa8>
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	1b52      	subs	r2, r2, r5
 8007794:	d420      	bmi.n	80077d8 <_malloc_r+0xd0>
 8007796:	2a0b      	cmp	r2, #11
 8007798:	d917      	bls.n	80077ca <_malloc_r+0xc2>
 800779a:	1961      	adds	r1, r4, r5
 800779c:	42a3      	cmp	r3, r4
 800779e:	6025      	str	r5, [r4, #0]
 80077a0:	bf18      	it	ne
 80077a2:	6059      	strne	r1, [r3, #4]
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	bf08      	it	eq
 80077a8:	f8c8 1000 	streq.w	r1, [r8]
 80077ac:	5162      	str	r2, [r4, r5]
 80077ae:	604b      	str	r3, [r1, #4]
 80077b0:	4630      	mov	r0, r6
 80077b2:	f000 f82f 	bl	8007814 <__malloc_unlock>
 80077b6:	f104 000b 	add.w	r0, r4, #11
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	f020 0007 	bic.w	r0, r0, #7
 80077c0:	1ac2      	subs	r2, r0, r3
 80077c2:	bf1c      	itt	ne
 80077c4:	1a1b      	subne	r3, r3, r0
 80077c6:	50a3      	strne	r3, [r4, r2]
 80077c8:	e7af      	b.n	800772a <_malloc_r+0x22>
 80077ca:	6862      	ldr	r2, [r4, #4]
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	bf0c      	ite	eq
 80077d0:	f8c8 2000 	streq.w	r2, [r8]
 80077d4:	605a      	strne	r2, [r3, #4]
 80077d6:	e7eb      	b.n	80077b0 <_malloc_r+0xa8>
 80077d8:	4623      	mov	r3, r4
 80077da:	6864      	ldr	r4, [r4, #4]
 80077dc:	e7ae      	b.n	800773c <_malloc_r+0x34>
 80077de:	463c      	mov	r4, r7
 80077e0:	687f      	ldr	r7, [r7, #4]
 80077e2:	e7b6      	b.n	8007752 <_malloc_r+0x4a>
 80077e4:	461a      	mov	r2, r3
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d1fb      	bne.n	80077e4 <_malloc_r+0xdc>
 80077ec:	2300      	movs	r3, #0
 80077ee:	6053      	str	r3, [r2, #4]
 80077f0:	e7de      	b.n	80077b0 <_malloc_r+0xa8>
 80077f2:	230c      	movs	r3, #12
 80077f4:	6033      	str	r3, [r6, #0]
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 f80c 	bl	8007814 <__malloc_unlock>
 80077fc:	e794      	b.n	8007728 <_malloc_r+0x20>
 80077fe:	6005      	str	r5, [r0, #0]
 8007800:	e7d6      	b.n	80077b0 <_malloc_r+0xa8>
 8007802:	bf00      	nop
 8007804:	24000464 	.word	0x24000464

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	@ (8007810 <__malloc_lock+0x8>)
 800780a:	f000 b84b 	b.w	80078a4 <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	240005a4 	.word	0x240005a4

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	@ (800781c <__malloc_unlock+0x8>)
 8007816:	f000 b846 	b.w	80078a6 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	240005a4 	.word	0x240005a4

08007820 <memset>:
 8007820:	4402      	add	r2, r0
 8007822:	4603      	mov	r3, r0
 8007824:	4293      	cmp	r3, r2
 8007826:	d100      	bne.n	800782a <memset+0xa>
 8007828:	4770      	bx	lr
 800782a:	f803 1b01 	strb.w	r1, [r3], #1
 800782e:	e7f9      	b.n	8007824 <memset+0x4>

08007830 <_sbrk_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d06      	ldr	r5, [pc, #24]	@ (800784c <_sbrk_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7f9 fe98 	bl	8001570 <_sbrk>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_sbrk_r+0x1a>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_sbrk_r+0x1a>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	240005a0 	.word	0x240005a0

08007850 <__errno>:
 8007850:	4b01      	ldr	r3, [pc, #4]	@ (8007858 <__errno+0x8>)
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	24000024 	.word	0x24000024

0800785c <__libc_init_array>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	4d0d      	ldr	r5, [pc, #52]	@ (8007894 <__libc_init_array+0x38>)
 8007860:	4c0d      	ldr	r4, [pc, #52]	@ (8007898 <__libc_init_array+0x3c>)
 8007862:	1b64      	subs	r4, r4, r5
 8007864:	10a4      	asrs	r4, r4, #2
 8007866:	2600      	movs	r6, #0
 8007868:	42a6      	cmp	r6, r4
 800786a:	d109      	bne.n	8007880 <__libc_init_array+0x24>
 800786c:	4d0b      	ldr	r5, [pc, #44]	@ (800789c <__libc_init_array+0x40>)
 800786e:	4c0c      	ldr	r4, [pc, #48]	@ (80078a0 <__libc_init_array+0x44>)
 8007870:	f000 f864 	bl	800793c <_init>
 8007874:	1b64      	subs	r4, r4, r5
 8007876:	10a4      	asrs	r4, r4, #2
 8007878:	2600      	movs	r6, #0
 800787a:	42a6      	cmp	r6, r4
 800787c:	d105      	bne.n	800788a <__libc_init_array+0x2e>
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	f855 3b04 	ldr.w	r3, [r5], #4
 8007884:	4798      	blx	r3
 8007886:	3601      	adds	r6, #1
 8007888:	e7ee      	b.n	8007868 <__libc_init_array+0xc>
 800788a:	f855 3b04 	ldr.w	r3, [r5], #4
 800788e:	4798      	blx	r3
 8007890:	3601      	adds	r6, #1
 8007892:	e7f2      	b.n	800787a <__libc_init_array+0x1e>
 8007894:	08007994 	.word	0x08007994
 8007898:	08007994 	.word	0x08007994
 800789c:	08007994 	.word	0x08007994
 80078a0:	08007998 	.word	0x08007998

080078a4 <__retarget_lock_acquire_recursive>:
 80078a4:	4770      	bx	lr

080078a6 <__retarget_lock_release_recursive>:
 80078a6:	4770      	bx	lr

080078a8 <_free_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4605      	mov	r5, r0
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d041      	beq.n	8007934 <_free_r+0x8c>
 80078b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b4:	1f0c      	subs	r4, r1, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bfb8      	it	lt
 80078ba:	18e4      	addlt	r4, r4, r3
 80078bc:	f7ff ffa4 	bl	8007808 <__malloc_lock>
 80078c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007938 <_free_r+0x90>)
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	b933      	cbnz	r3, 80078d4 <_free_r+0x2c>
 80078c6:	6063      	str	r3, [r4, #4]
 80078c8:	6014      	str	r4, [r2, #0]
 80078ca:	4628      	mov	r0, r5
 80078cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d0:	f7ff bfa0 	b.w	8007814 <__malloc_unlock>
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	d908      	bls.n	80078ea <_free_r+0x42>
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	1821      	adds	r1, r4, r0
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf01      	itttt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	1809      	addeq	r1, r1, r0
 80078e6:	6021      	streq	r1, [r4, #0]
 80078e8:	e7ed      	b.n	80078c6 <_free_r+0x1e>
 80078ea:	461a      	mov	r2, r3
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	b10b      	cbz	r3, 80078f4 <_free_r+0x4c>
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	d9fa      	bls.n	80078ea <_free_r+0x42>
 80078f4:	6811      	ldr	r1, [r2, #0]
 80078f6:	1850      	adds	r0, r2, r1
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d10b      	bne.n	8007914 <_free_r+0x6c>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	4401      	add	r1, r0
 8007900:	1850      	adds	r0, r2, r1
 8007902:	4283      	cmp	r3, r0
 8007904:	6011      	str	r1, [r2, #0]
 8007906:	d1e0      	bne.n	80078ca <_free_r+0x22>
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	6053      	str	r3, [r2, #4]
 800790e:	4408      	add	r0, r1
 8007910:	6010      	str	r0, [r2, #0]
 8007912:	e7da      	b.n	80078ca <_free_r+0x22>
 8007914:	d902      	bls.n	800791c <_free_r+0x74>
 8007916:	230c      	movs	r3, #12
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	e7d6      	b.n	80078ca <_free_r+0x22>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	1821      	adds	r1, r4, r0
 8007920:	428b      	cmp	r3, r1
 8007922:	bf04      	itt	eq
 8007924:	6819      	ldreq	r1, [r3, #0]
 8007926:	685b      	ldreq	r3, [r3, #4]
 8007928:	6063      	str	r3, [r4, #4]
 800792a:	bf04      	itt	eq
 800792c:	1809      	addeq	r1, r1, r0
 800792e:	6021      	streq	r1, [r4, #0]
 8007930:	6054      	str	r4, [r2, #4]
 8007932:	e7ca      	b.n	80078ca <_free_r+0x22>
 8007934:	bd38      	pop	{r3, r4, r5, pc}
 8007936:	bf00      	nop
 8007938:	24000464 	.word	0x24000464

0800793c <_init>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr

08007948 <_fini>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr
